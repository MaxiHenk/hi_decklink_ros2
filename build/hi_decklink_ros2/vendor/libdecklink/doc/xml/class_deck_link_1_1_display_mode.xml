<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="class_deck_link_1_1_display_mode" kind="class" language="C++" prot="public">
    <compoundname>DeckLink::DisplayMode</compoundname>
    <includes refid="display__mode_8hpp" local="no">display_mode.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_deck_link_1_1_display_mode_1a641ccf33b2bb9986e5ee074087b78bf3" prot="private" static="no" mutable="no">
        <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">bool</ref></type>
        <definition>bool DeckLink::DisplayMode::_valid</definition>
        <argsstring></argsstring>
        <name>_valid</name>
        <qualifiedname>DeckLink::DisplayMode::_valid</qualifiedname>
        <initializer>= <ref refid="class_deck_link_1_1_bit_mask" kindref="compound">false</ref></initializer>
        <briefdescription>
<para>Was this <ref refid="class_deck_link_1_1_display_mode" kindref="compound">DisplayMode</ref> initialised from a valid <ref refid="class_i_deck_link" kindref="compound">IDeckLink</ref> Display Mode ? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/display_mode.hpp" line="76" column="14" bodyfile="include/libdecklink/display_mode.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_deck_link_1_1_display_mode_1a128a038706d558a5c73372bc0b8024ab" prot="private" static="no" mutable="no">
        <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">long</ref></type>
        <definition>long DeckLink::DisplayMode::_width</definition>
        <argsstring></argsstring>
        <name>_width</name>
        <qualifiedname>DeckLink::DisplayMode::_width</qualifiedname>
        <initializer>= -1</initializer>
        <briefdescription>
<para>The width of the image in pixels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/display_mode.hpp" line="79" column="14" bodyfile="include/libdecklink/display_mode.hpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_deck_link_1_1_display_mode_1a760bc42ba727976a107a956cfedcb5b9" prot="private" static="no" mutable="no">
        <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">long</ref></type>
        <definition>long DeckLink::DisplayMode::_height</definition>
        <argsstring></argsstring>
        <name>_height</name>
        <qualifiedname>DeckLink::DisplayMode::_height</qualifiedname>
        <initializer>= -1</initializer>
        <briefdescription>
<para>The height of the image in pixels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/display_mode.hpp" line="82" column="14" bodyfile="include/libdecklink/display_mode.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_deck_link_1_1_display_mode_1a8d38c1e2b6598276b4ef323e823bddbb" prot="private" static="no" mutable="no">
        <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">double</ref></type>
        <definition>double DeckLink::DisplayMode::_framerate</definition>
        <argsstring></argsstring>
        <name>_framerate</name>
        <qualifiedname>DeckLink::DisplayMode::_framerate</qualifiedname>
        <initializer>= -1.0</initializer>
        <briefdescription>
<para>The framerate of the video feed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/display_mode.hpp" line="85" column="16" bodyfile="include/libdecklink/display_mode.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_deck_link_1_1_display_mode_1a0ee8fb78426c5bc815d3fce71a142516" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_deck_link_1a7c6679feb8ce86cae4c6201599c7c875" kindref="member">FieldDominance</ref></type>
        <definition>FieldDominance DeckLink::DisplayMode::_field_dominance</definition>
        <argsstring></argsstring>
        <name>_field_dominance</name>
        <qualifiedname>DeckLink::DisplayMode::_field_dominance</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/display_mode.hpp" line="87" column="24" bodyfile="include/libdecklink/display_mode.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_deck_link_1_1_display_mode_1a282af3e816a2f5c0b51626762774a7b3" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string DeckLink::DisplayMode::_name</definition>
        <argsstring></argsstring>
        <name>_name</name>
        <qualifiedname>DeckLink::DisplayMode::_name</qualifiedname>
        <briefdescription>
<para>The name of the mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/display_mode.hpp" line="90" column="21" bodyfile="include/libdecklink/display_mode.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_deck_link_1_1_display_mode_1a83a4c5fe71ea1edcfbc5d0f4b4d2469b" prot="private" static="no" mutable="no">
        <type><ref refid="_deck_link_a_p_i_modes_8h_1a53a24da93c73653675b403e3b4b30a4a" kindref="member">BMDDisplayMode</ref></type>
        <definition>BMDDisplayMode DeckLink::DisplayMode::_raw_mode</definition>
        <argsstring></argsstring>
        <name>_raw_mode</name>
        <qualifiedname>DeckLink::DisplayMode::_raw_mode</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/display_mode.hpp" line="92" column="24" bodyfile="include/libdecklink/display_mode.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_deck_link_1_1_display_mode_1a0c53f90221502826d3719d67e6adb876" prot="private" static="no" mutable="no">
        <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">BitMask</ref>&lt; <ref refid="namespace_deck_link_1ad8ad8d98601a48a302a8c0d3d5c0e5bb" kindref="member">DisplayModeFlags</ref> &gt;</type>
        <definition>BitMask&lt;DisplayModeFlags&gt; DeckLink::DisplayMode::_flags</definition>
        <argsstring></argsstring>
        <name>_flags</name>
        <qualifiedname>DeckLink::DisplayMode::_flags</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/display_mode.hpp" line="94" column="17" bodyfile="include/libdecklink/display_mode.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_deck_link_1_1_display_mode_1a0818cb1a584f455778ff0e1d93b8f921" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DeckLink::DisplayMode::DisplayMode</definition>
        <argsstring>()=default</argsstring>
        <name>DisplayMode</name>
        <qualifiedname>DeckLink::DisplayMode::DisplayMode</qualifiedname>
        <briefdescription>
<para>Construct an Empty <ref refid="class_deck_link_1_1_display_mode" kindref="compound">DisplayMode</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>The <emphasis>m_is_initialised</emphasis> variable will be false. Accessing any of the getters of the object will result in a <ref refid="struct_deck_link_1_1runtime__error" kindref="compound">DeckLink::runtime_error</ref> being thrown. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/display_mode.hpp" line="24" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_deck_link_1_1_display_mode_1ad32caae55461f34f90e8e568b3f6bc1c" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>DeckLink::DisplayMode::DisplayMode</definition>
        <argsstring>(IDeckLinkDisplayMode *mode)</argsstring>
        <name>DisplayMode</name>
        <qualifiedname>DeckLink::DisplayMode::DisplayMode</qualifiedname>
        <param>
          <type><ref refid="class_i_deck_link_display_mode" kindref="compound">IDeckLinkDisplayMode</ref> *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Initialise a <ref refid="class_deck_link_1_1_display_mode_1a0818cb1a584f455778ff0e1d93b8f921" kindref="member">DisplayMode</ref> object from an <computeroutput><ref refid="class_i_deck_link_display_mode" kindref="compound">IDeckLinkDisplayMode</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para>In this case the object will be correctly initialised.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the <computeroutput><ref refid="class_i_deck_link_display_mode" kindref="compound">IDeckLinkDisplayMode</ref></computeroutput> from which to retrieve the display mode information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/display_mode.hpp" line="34" column="18" bodyfile="src/libdecklink/display_mode.cpp" bodystart="13" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="class_deck_link_1_1_display_mode_1ab326f42beae342b4b70a736ce2d3bda5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DeckLink::DisplayMode::DisplayMode</definition>
        <argsstring>(const DisplayMode &amp;other)=default</argsstring>
        <name>DisplayMode</name>
        <qualifiedname>DeckLink::DisplayMode::DisplayMode</qualifiedname>
        <param>
          <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">const</ref> <ref refid="class_deck_link_1_1_display_mode" kindref="compound">DisplayMode</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/display_mode.hpp" line="36" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_deck_link_1_1_display_mode_1ae6f9ff8b62702a4d6c8b661133d266ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">bool</ref></type>
        <definition>bool DeckLink::DisplayMode::is_valid</definition>
        <argsstring>() const</argsstring>
        <name>is_valid</name>
        <qualifiedname>DeckLink::DisplayMode::is_valid</qualifiedname>
        <briefdescription>
<para>Was this instance initialised from a valid <computeroutput><ref refid="class_i_deck_link_display_mode" kindref="compound">IDeckLinkDisplayMode</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the object was default constructed then no display mode was provided and the width, height, etc variables are unset.</para>
<para><simplesect kind="return"><para>Whether the display mode is initialised </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/display_mode.hpp" line="45" column="14" bodyfile="include/libdecklink/display_mode.hpp" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="class_deck_link_1_1_display_mode_1af53a96bb0441b95986ba4834d2500e4a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_deck_link_1a2e9c9db98010bef3cbbd26d2df2c754c" kindref="member">ImageFormat</ref></type>
        <definition>ImageFormat DeckLink::DisplayMode::get_image_format</definition>
        <argsstring>() const</argsstring>
        <name>get_image_format</name>
        <qualifiedname>DeckLink::DisplayMode::get_image_format</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/display_mode.hpp" line="49" column="21" bodyfile="include/libdecklink/display_mode.hpp" bodystart="49" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_deck_link_1_1_display_mode_1a6c3db6a112d628df38d468fc987479e9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">long</ref></type>
        <definition>long DeckLink::DisplayMode::get_width</definition>
        <argsstring>() const</argsstring>
        <name>get_width</name>
        <qualifiedname>DeckLink::DisplayMode::get_width</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/display_mode.hpp" line="53" column="14" bodyfile="include/libdecklink/display_mode.hpp" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="class_deck_link_1_1_display_mode_1a4c6e3b5b4ef01531d39caebc9c9b439d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">long</ref></type>
        <definition>long DeckLink::DisplayMode::get_height</definition>
        <argsstring>() const</argsstring>
        <name>get_height</name>
        <qualifiedname>DeckLink::DisplayMode::get_height</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/display_mode.hpp" line="55" column="14" bodyfile="include/libdecklink/display_mode.hpp" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="class_deck_link_1_1_display_mode_1a17a2bfdc0c7fa300bbe5f0c8f5cfa200" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">double</ref></type>
        <definition>double DeckLink::DisplayMode::get_framerate</definition>
        <argsstring>() const</argsstring>
        <name>get_framerate</name>
        <qualifiedname>DeckLink::DisplayMode::get_framerate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/display_mode.hpp" line="57" column="16" bodyfile="include/libdecklink/display_mode.hpp" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="class_deck_link_1_1_display_mode_1a480e0e13124ab17a6a3c480879aa3cf3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">const</ref> std::string &amp;</type>
        <definition>const std::string &amp; DeckLink::DisplayMode::get_name</definition>
        <argsstring>() const</argsstring>
        <name>get_name</name>
        <qualifiedname>DeckLink::DisplayMode::get_name</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/display_mode.hpp" line="59" column="27" bodyfile="include/libdecklink/display_mode.hpp" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="class_deck_link_1_1_display_mode_1ac0d897759c8598687e2dd6c49d6abc3b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_deck_link_1a7c6679feb8ce86cae4c6201599c7c875" kindref="member">FieldDominance</ref></type>
        <definition>FieldDominance DeckLink::DisplayMode::get_field_dominance</definition>
        <argsstring>() const</argsstring>
        <name>get_field_dominance</name>
        <qualifiedname>DeckLink::DisplayMode::get_field_dominance</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/display_mode.hpp" line="61" column="24" bodyfile="include/libdecklink/display_mode.hpp" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="class_deck_link_1_1_display_mode_1a7899058e26a5339307ba07ad543258fc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">const</ref> <ref refid="class_deck_link_1_1_bit_mask" kindref="compound">BitMask</ref>&lt; <ref refid="namespace_deck_link_1ad8ad8d98601a48a302a8c0d3d5c0e5bb" kindref="member">DisplayModeFlags</ref> &gt; &amp;</type>
        <definition>const BitMask&lt; DisplayModeFlags &gt; &amp; DeckLink::DisplayMode::get_flags</definition>
        <argsstring>() const</argsstring>
        <name>get_flags</name>
        <qualifiedname>DeckLink::DisplayMode::get_flags</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/display_mode.hpp" line="63" column="23" bodyfile="include/libdecklink/display_mode.hpp" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="class_deck_link_1_1_display_mode_1ac6b629de1ae61d055acfa4215820e2b8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="_deck_link_a_p_i_modes_8h_1a53a24da93c73653675b403e3b4b30a4a" kindref="member">BMDDisplayMode</ref></type>
        <definition>BMDDisplayMode DeckLink::DisplayMode::get_raw_mode</definition>
        <argsstring>() const</argsstring>
        <name>get_raw_mode</name>
        <qualifiedname>DeckLink::DisplayMode::get_raw_mode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/display_mode.hpp" line="65" column="24" bodyfile="include/libdecklink/display_mode.hpp" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="class_deck_link_1_1_display_mode_1a0d44a42757ac93583458c4e9bec2d552" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">bool</ref></type>
        <definition>bool DeckLink::DisplayMode::has_3D_support</definition>
        <argsstring>() const</argsstring>
        <name>has_3D_support</name>
        <qualifiedname>DeckLink::DisplayMode::has_3D_support</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/display_mode.hpp" line="67" column="14" bodyfile="include/libdecklink/display_mode.hpp" bodystart="67" bodyend="67"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>DeckLink::BitMask&lt; DisplayModeFlags &gt;</label>
        <link refid="class_deck_link_1_1_bit_mask"/>
      </node>
      <node id="1">
        <label>DeckLink::DisplayMode</label>
        <link refid="class_deck_link_1_1_display_mode"/>
        <childnode refid="2" relation="usage">
          <edgelabel>_flags</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/libdecklink/display_mode.hpp" line="16" column="5" bodyfile="include/libdecklink/display_mode.hpp" bodystart="16" bodyend="95"/>
    <listofallmembers>
      <member refid="class_deck_link_1_1_display_mode_1a0ee8fb78426c5bc815d3fce71a142516" prot="private" virt="non-virtual"><scope>DeckLink::DisplayMode</scope><name>_field_dominance</name></member>
      <member refid="class_deck_link_1_1_display_mode_1a0c53f90221502826d3719d67e6adb876" prot="private" virt="non-virtual"><scope>DeckLink::DisplayMode</scope><name>_flags</name></member>
      <member refid="class_deck_link_1_1_display_mode_1a8d38c1e2b6598276b4ef323e823bddbb" prot="private" virt="non-virtual"><scope>DeckLink::DisplayMode</scope><name>_framerate</name></member>
      <member refid="class_deck_link_1_1_display_mode_1a760bc42ba727976a107a956cfedcb5b9" prot="private" virt="non-virtual"><scope>DeckLink::DisplayMode</scope><name>_height</name></member>
      <member refid="class_deck_link_1_1_display_mode_1a282af3e816a2f5c0b51626762774a7b3" prot="private" virt="non-virtual"><scope>DeckLink::DisplayMode</scope><name>_name</name></member>
      <member refid="class_deck_link_1_1_display_mode_1a83a4c5fe71ea1edcfbc5d0f4b4d2469b" prot="private" virt="non-virtual"><scope>DeckLink::DisplayMode</scope><name>_raw_mode</name></member>
      <member refid="class_deck_link_1_1_display_mode_1a641ccf33b2bb9986e5ee074087b78bf3" prot="private" virt="non-virtual"><scope>DeckLink::DisplayMode</scope><name>_valid</name></member>
      <member refid="class_deck_link_1_1_display_mode_1a128a038706d558a5c73372bc0b8024ab" prot="private" virt="non-virtual"><scope>DeckLink::DisplayMode</scope><name>_width</name></member>
      <member refid="class_deck_link_1_1_display_mode_1a0818cb1a584f455778ff0e1d93b8f921" prot="public" virt="non-virtual"><scope>DeckLink::DisplayMode</scope><name>DisplayMode</name></member>
      <member refid="class_deck_link_1_1_display_mode_1ad32caae55461f34f90e8e568b3f6bc1c" prot="public" virt="non-virtual"><scope>DeckLink::DisplayMode</scope><name>DisplayMode</name></member>
      <member refid="class_deck_link_1_1_display_mode_1ab326f42beae342b4b70a736ce2d3bda5" prot="public" virt="non-virtual"><scope>DeckLink::DisplayMode</scope><name>DisplayMode</name></member>
      <member refid="class_deck_link_1_1_display_mode_1ac0d897759c8598687e2dd6c49d6abc3b" prot="public" virt="non-virtual"><scope>DeckLink::DisplayMode</scope><name>get_field_dominance</name></member>
      <member refid="class_deck_link_1_1_display_mode_1a7899058e26a5339307ba07ad543258fc" prot="public" virt="non-virtual"><scope>DeckLink::DisplayMode</scope><name>get_flags</name></member>
      <member refid="class_deck_link_1_1_display_mode_1a17a2bfdc0c7fa300bbe5f0c8f5cfa200" prot="public" virt="non-virtual"><scope>DeckLink::DisplayMode</scope><name>get_framerate</name></member>
      <member refid="class_deck_link_1_1_display_mode_1a4c6e3b5b4ef01531d39caebc9c9b439d" prot="public" virt="non-virtual"><scope>DeckLink::DisplayMode</scope><name>get_height</name></member>
      <member refid="class_deck_link_1_1_display_mode_1af53a96bb0441b95986ba4834d2500e4a" prot="public" virt="non-virtual"><scope>DeckLink::DisplayMode</scope><name>get_image_format</name></member>
      <member refid="class_deck_link_1_1_display_mode_1a480e0e13124ab17a6a3c480879aa3cf3" prot="public" virt="non-virtual"><scope>DeckLink::DisplayMode</scope><name>get_name</name></member>
      <member refid="class_deck_link_1_1_display_mode_1ac6b629de1ae61d055acfa4215820e2b8" prot="public" virt="non-virtual"><scope>DeckLink::DisplayMode</scope><name>get_raw_mode</name></member>
      <member refid="class_deck_link_1_1_display_mode_1a6c3db6a112d628df38d468fc987479e9" prot="public" virt="non-virtual"><scope>DeckLink::DisplayMode</scope><name>get_width</name></member>
      <member refid="class_deck_link_1_1_display_mode_1a0d44a42757ac93583458c4e9bec2d552" prot="public" virt="non-virtual"><scope>DeckLink::DisplayMode</scope><name>has_3D_support</name></member>
      <member refid="class_deck_link_1_1_display_mode_1ae6f9ff8b62702a4d6c8b661133d266ed" prot="public" virt="non-virtual"><scope>DeckLink::DisplayMode</scope><name>is_valid</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
