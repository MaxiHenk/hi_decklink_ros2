<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="class_deck_link_1_1_video_frame" kind="class" language="C++" prot="public">
    <compoundname>DeckLink::VideoFrame</compoundname>
    <derivedcompoundref refid="class_deck_link_1_1_video_input_frame" prot="public" virt="non-virtual">DeckLink::VideoInputFrame</derivedcompoundref>
    <derivedcompoundref refid="class_deck_link_1_1_video_output_frame" prot="public" virt="non-virtual">DeckLink::VideoOutputFrame</derivedcompoundref>
    <includes refid="video__frame_8hpp" local="no">video_frame.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_deck_link_1_1_video_frame_1aa7269c29a030fe8063d20a6752ab2d02" prot="private" static="no" mutable="no">
        <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">IDeckLinkVideoFrame</ref> *</type>
        <definition>IDeckLinkVideoFrame* DeckLink::VideoFrame::_raw_frame</definition>
        <argsstring></argsstring>
        <name>_raw_frame</name>
        <qualifiedname>DeckLink::VideoFrame::_raw_frame</qualifiedname>
        <initializer>= <ref refid="class_deck_link_1_1_bit_mask" kindref="compound">nullptr</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/video_frame.hpp" line="51" column="29" bodyfile="include/libdecklink/video_frame.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_deck_link_1_1_video_frame_1aa629c9c8cc7973cd6a1e58b589348daf" prot="private" static="no" mutable="yes">
        <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">long</ref></type>
        <definition>long DeckLink::VideoFrame::_width</definition>
        <argsstring></argsstring>
        <name>_width</name>
        <qualifiedname>DeckLink::VideoFrame::_width</qualifiedname>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/video_frame.hpp" line="55" column="22" bodyfile="include/libdecklink/video_frame.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_deck_link_1_1_video_frame_1a5f05c4da22ef382619f9ddea2b174050" prot="private" static="no" mutable="yes">
        <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">long</ref></type>
        <definition>long DeckLink::VideoFrame::_height</definition>
        <argsstring></argsstring>
        <name>_height</name>
        <qualifiedname>DeckLink::VideoFrame::_height</qualifiedname>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/video_frame.hpp" line="56" column="22" bodyfile="include/libdecklink/video_frame.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_deck_link_1_1_video_frame_1a3b24bbb03e74ec6ea1dc5e5ff8b59adf" prot="private" static="no" mutable="yes">
        <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">long</ref></type>
        <definition>long DeckLink::VideoFrame::_row_bytes</definition>
        <argsstring></argsstring>
        <name>_row_bytes</name>
        <qualifiedname>DeckLink::VideoFrame::_row_bytes</qualifiedname>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/video_frame.hpp" line="57" column="22" bodyfile="include/libdecklink/video_frame.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_deck_link_1_1_video_frame_1a8af5d37f2d0193bda1015477e17ec13c" prot="private" static="no" mutable="yes">
        <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">unsigned</ref> <ref refid="class_deck_link_1_1_bit_mask" kindref="compound">char</ref> *</type>
        <definition>unsigned char* DeckLink::VideoFrame::_frame_data</definition>
        <argsstring></argsstring>
        <name>_frame_data</name>
        <qualifiedname>DeckLink::VideoFrame::_frame_data</qualifiedname>
        <initializer>= <ref refid="class_deck_link_1_1_bit_mask" kindref="compound">nullptr</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/video_frame.hpp" line="59" column="31" bodyfile="include/libdecklink/video_frame.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_deck_link_1_1_video_frame_1ac6ebcc1542ff4b20061deaa5e065dbbb" prot="private" static="no" mutable="yes">
        <type><ref refid="namespace_deck_link_1ac3c2be721d795618876643d19110e511" kindref="member">PixelFormat</ref></type>
        <definition>PixelFormat DeckLink::VideoFrame::_px_format</definition>
        <argsstring></argsstring>
        <name>_px_format</name>
        <qualifiedname>DeckLink::VideoFrame::_px_format</qualifiedname>
        <initializer>= <ref refid="namespace_deck_link_1ac3c2be721d795618876643d19110e511a88183b946cc5f0e8c96b2e66e1c74a7e" kindref="member">PixelFormat::Unknown</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/video_frame.hpp" line="61" column="29" bodyfile="include/libdecklink/video_frame.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_deck_link_1_1_video_frame_1a09b1a352215dadac351040f24af833e8" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>DeckLink::VideoFrame::VideoFrame</definition>
        <argsstring>(IDeckLinkVideoFrame *raw_frame)</argsstring>
        <name>VideoFrame</name>
        <qualifiedname>DeckLink::VideoFrame::VideoFrame</qualifiedname>
        <param>
          <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">IDeckLinkVideoFrame</ref> *</type>
          <declname>raw_frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/video_frame.hpp" line="21" column="18" bodyfile="src/libdecklink/video_frame.cpp" bodystart="10" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="class_deck_link_1_1_video_frame_1a5c9a1c9eb2a7dfd6ab728404a03d145b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual DeckLink::VideoFrame::~VideoFrame</definition>
        <argsstring>()=default</argsstring>
        <name>~VideoFrame</name>
        <qualifiedname>DeckLink::VideoFrame::~VideoFrame</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/video_frame.hpp" line="23" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_deck_link_1_1_video_frame_1abc248e5bcdfd3c90c09901f6389e9add" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">long</ref></type>
        <definition>long DeckLink::VideoFrame::width</definition>
        <argsstring>() const</argsstring>
        <name>width</name>
        <qualifiedname>DeckLink::VideoFrame::width</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/video_frame.hpp" line="25" column="14" bodyfile="src/libdecklink/video_frame.cpp" bodystart="16" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="class_deck_link_1_1_video_frame_1a6aa080189b183910eef998d804955497" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">long</ref></type>
        <definition>long DeckLink::VideoFrame::height</definition>
        <argsstring>() const</argsstring>
        <name>height</name>
        <qualifiedname>DeckLink::VideoFrame::height</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/video_frame.hpp" line="26" column="14" bodyfile="src/libdecklink/video_frame.cpp" bodystart="25" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="class_deck_link_1_1_video_frame_1a2e8f75f0577266d2d2637f0b4224a88c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">long</ref></type>
        <definition>long DeckLink::VideoFrame::row_bytes</definition>
        <argsstring>() const</argsstring>
        <name>row_bytes</name>
        <qualifiedname>DeckLink::VideoFrame::row_bytes</qualifiedname>
        <briefdescription>
<para>Get the size of a row accounting for extra padding at the end of rows. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/video_frame.hpp" line="29" column="14" bodyfile="src/libdecklink/video_frame.cpp" bodystart="34" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="class_deck_link_1_1_video_frame_1a5998ebc13690356f9eee0f53f026297f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">size_t</ref></type>
        <definition>size_t DeckLink::VideoFrame::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>DeckLink::VideoFrame::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/video_frame.hpp" line="30" column="16" bodyfile="src/libdecklink/video_frame.cpp" bodystart="43" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="class_deck_link_1_1_video_frame_1aba801632491524f83e0fcf244eba7df8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_deck_link_1ac3c2be721d795618876643d19110e511" kindref="member">PixelFormat</ref></type>
        <definition>PixelFormat DeckLink::VideoFrame::pixel_format</definition>
        <argsstring>() const</argsstring>
        <name>pixel_format</name>
        <qualifiedname>DeckLink::VideoFrame::pixel_format</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/video_frame.hpp" line="32" column="21" bodyfile="src/libdecklink/video_frame.cpp" bodystart="48" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="class_deck_link_1_1_video_frame_1aa02aac382c4e273131c86ed3f50f68c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">unsigned</ref> <ref refid="class_deck_link_1_1_bit_mask" kindref="compound">char</ref> *</type>
        <definition>unsigned char * DeckLink::VideoFrame::bytes</definition>
        <argsstring>() const</argsstring>
        <name>bytes</name>
        <qualifiedname>DeckLink::VideoFrame::bytes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/video_frame.hpp" line="35" column="24" bodyfile="src/libdecklink/video_frame.cpp" bodystart="57" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="class_deck_link_1_1_video_frame_1afa87452ac58e5e014aa844db19be3d8a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string DeckLink::VideoFrame::timecode</definition>
        <argsstring>(TimecodeFormat format) const</argsstring>
        <name>timecode</name>
        <qualifiedname>DeckLink::VideoFrame::timecode</qualifiedname>
        <param>
          <type><ref refid="namespace_deck_link_1acad148108e53f5e34b4c5db83dd6b2cc" kindref="member">TimecodeFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/video_frame.hpp" line="37" column="21" bodyfile="src/libdecklink/video_frame.cpp" bodystart="74" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_deck_link_1_1_video_frame_1a73d260b2f8670cfafb744ed34c158108" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">void</ref> *</type>
        <definition>void * DeckLink::VideoFrame::start</definition>
        <argsstring>()</argsstring>
        <name>start</name>
        <qualifiedname>DeckLink::VideoFrame::start</qualifiedname>
        <briefdescription>
<para>Return a pointer to the start of the enclosed data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/video_frame.hpp" line="40" column="14" bodyfile="src/libdecklink/video_frame.cpp" bodystart="124" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="class_deck_link_1_1_video_frame_1a436307aa1554af0619982bfd39641ed6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">void</ref> *</type>
        <definition>void * DeckLink::VideoFrame::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <qualifiedname>DeckLink::VideoFrame::end</qualifiedname>
        <briefdescription>
<para>Return a past-the-end pointer to the enclosed data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/video_frame.hpp" line="43" column="14" bodyfile="src/libdecklink/video_frame.cpp" bodystart="129" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="class_deck_link_1_1_video_frame_1a4947c5b5863daf437ac2c25fa12da461" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">IDeckLinkVideoFrame</ref> *</type>
        <definition>IDeckLinkVideoFrame * DeckLink::VideoFrame::get_raw_ptr</definition>
        <argsstring>() const</argsstring>
        <name>get_raw_ptr</name>
        <qualifiedname>DeckLink::VideoFrame::get_raw_ptr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/video_frame.hpp" line="45" column="29" bodyfile="include/libdecklink/video_frame.hpp" bodystart="45" bodyend="45"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Wrapper for IDeckLinkVideoFrame*. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>Timecodes are not completely supported for the simple reason that I have no hardware with timecodes with which to test. The <ref refid="class_deck_link_1_1_video_frame_1afa87452ac58e5e014aa844db19be3d8a" kindref="member">VideoFrame::timecode()</ref> function will return a string representation if the timecode could be found. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>DeckLink::VideoFrame</label>
        <link refid="class_deck_link_1_1_video_frame"/>
      </node>
      <node id="2">
        <label>DeckLink::VideoInputFrame</label>
        <link refid="class_deck_link_1_1_video_input_frame"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>DeckLink::VideoOutputFrame</label>
        <link refid="class_deck_link_1_1_video_output_frame"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="include/libdecklink/video_frame.hpp" line="19" column="5" bodyfile="include/libdecklink/video_frame.hpp" bodystart="19" bodyend="65"/>
    <listofallmembers>
      <member refid="class_deck_link_1_1_video_frame_1a8af5d37f2d0193bda1015477e17ec13c" prot="private" virt="non-virtual"><scope>DeckLink::VideoFrame</scope><name>_frame_data</name></member>
      <member refid="class_deck_link_1_1_video_frame_1a5f05c4da22ef382619f9ddea2b174050" prot="private" virt="non-virtual"><scope>DeckLink::VideoFrame</scope><name>_height</name></member>
      <member refid="class_deck_link_1_1_video_frame_1ac6ebcc1542ff4b20061deaa5e065dbbb" prot="private" virt="non-virtual"><scope>DeckLink::VideoFrame</scope><name>_px_format</name></member>
      <member refid="class_deck_link_1_1_video_frame_1aa7269c29a030fe8063d20a6752ab2d02" prot="private" virt="non-virtual"><scope>DeckLink::VideoFrame</scope><name>_raw_frame</name></member>
      <member refid="class_deck_link_1_1_video_frame_1a3b24bbb03e74ec6ea1dc5e5ff8b59adf" prot="private" virt="non-virtual"><scope>DeckLink::VideoFrame</scope><name>_row_bytes</name></member>
      <member refid="class_deck_link_1_1_video_frame_1aa629c9c8cc7973cd6a1e58b589348daf" prot="private" virt="non-virtual"><scope>DeckLink::VideoFrame</scope><name>_width</name></member>
      <member refid="class_deck_link_1_1_video_frame_1aa02aac382c4e273131c86ed3f50f68c3" prot="public" virt="non-virtual"><scope>DeckLink::VideoFrame</scope><name>bytes</name></member>
      <member refid="class_deck_link_1_1_video_frame_1a436307aa1554af0619982bfd39641ed6" prot="public" virt="non-virtual"><scope>DeckLink::VideoFrame</scope><name>end</name></member>
      <member refid="class_deck_link_1_1_video_frame_1a4947c5b5863daf437ac2c25fa12da461" prot="public" virt="non-virtual"><scope>DeckLink::VideoFrame</scope><name>get_raw_ptr</name></member>
      <member refid="class_deck_link_1_1_video_frame_1a6aa080189b183910eef998d804955497" prot="public" virt="non-virtual"><scope>DeckLink::VideoFrame</scope><name>height</name></member>
      <member refid="class_deck_link_1_1_video_frame_1aba801632491524f83e0fcf244eba7df8" prot="public" virt="non-virtual"><scope>DeckLink::VideoFrame</scope><name>pixel_format</name></member>
      <member refid="class_deck_link_1_1_video_frame_1a2e8f75f0577266d2d2637f0b4224a88c" prot="public" virt="non-virtual"><scope>DeckLink::VideoFrame</scope><name>row_bytes</name></member>
      <member refid="class_deck_link_1_1_video_frame_1a5998ebc13690356f9eee0f53f026297f" prot="public" virt="non-virtual"><scope>DeckLink::VideoFrame</scope><name>size</name></member>
      <member refid="class_deck_link_1_1_video_frame_1a73d260b2f8670cfafb744ed34c158108" prot="public" virt="non-virtual"><scope>DeckLink::VideoFrame</scope><name>start</name></member>
      <member refid="class_deck_link_1_1_video_frame_1afa87452ac58e5e014aa844db19be3d8a" prot="public" virt="non-virtual"><scope>DeckLink::VideoFrame</scope><name>timecode</name></member>
      <member refid="class_deck_link_1_1_video_frame_1a09b1a352215dadac351040f24af833e8" prot="public" virt="non-virtual"><scope>DeckLink::VideoFrame</scope><name>VideoFrame</name></member>
      <member refid="class_deck_link_1_1_video_frame_1abc248e5bcdfd3c90c09901f6389e9add" prot="public" virt="non-virtual"><scope>DeckLink::VideoFrame</scope><name>width</name></member>
      <member refid="class_deck_link_1_1_video_frame_1a5c9a1c9eb2a7dfd6ab728404a03d145b" prot="public" virt="virtual"><scope>DeckLink::VideoFrame</scope><name>~VideoFrame</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
