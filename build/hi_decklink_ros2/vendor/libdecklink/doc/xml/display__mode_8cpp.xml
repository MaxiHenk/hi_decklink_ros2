<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="display__mode_8cpp" kind="file" language="C++">
    <compoundname>display_mode.cpp</compoundname>
    <includes local="no">cassert</includes>
    <includes refid="_linux_c_o_m_8h" local="yes">decklink_sdk/LinuxCOM.h</includes>
    <includes refid="types_8hpp" local="yes">libdecklink/types.hpp</includes>
    <includes refid="errors_8hpp" local="yes">libdecklink/errors.hpp</includes>
    <includes refid="display__mode_8hpp" local="yes">libdecklink/display_mode.hpp</includes>
    <incdepgraph>
      <node id="7">
        <label>decklink_sdk/DeckLinkAPI.h</label>
        <link refid="_deck_link_a_p_i_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>DeckLinkAPIConfiguration.h</label>
        <link refid="_deck_link_a_p_i_configuration_8h"/>
      </node>
      <node id="13">
        <label>DeckLinkAPIDeckControl.h</label>
        <link refid="_deck_link_a_p_i_deck_control_8h"/>
      </node>
      <node id="11">
        <label>DeckLinkAPIDiscovery.h</label>
        <link refid="_deck_link_a_p_i_discovery_8h"/>
      </node>
      <node id="10">
        <label>DeckLinkAPIModes.h</label>
        <link refid="_deck_link_a_p_i_modes_8h"/>
      </node>
      <node id="9">
        <label>DeckLinkAPITypes.h</label>
        <link refid="_deck_link_a_p_i_types_8h"/>
      </node>
      <node id="3">
        <label>decklink_sdk/LinuxCOM.h</label>
        <link refid="_linux_c_o_m_8h"/>
      </node>
      <node id="17">
        <label>libdecklink/bitmask.hpp</label>
        <link refid="bitmask_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>libdecklink/display_mode.hpp</label>
        <link refid="display__mode_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>libdecklink/errors.hpp</label>
        <link refid="errors_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>libdecklink/types.hpp</label>
        <link refid="types_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/libdecklink/display_mode.cpp</label>
        <link refid="display__mode_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>array</label>
      </node>
      <node id="15">
        <label>boost/exception/all.hpp</label>
      </node>
      <node id="2">
        <label>cassert</label>
      </node>
      <node id="19">
        <label>initializer_list</label>
      </node>
      <node id="8">
        <label>stdint.h</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="18">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>tibo<sp/>on<sp/>15/01/18.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_linux_c_o_m_8h" kindref="compound">decklink_sdk/LinuxCOM.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="types_8hpp" kindref="compound">libdecklink/types.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="errors_8hpp" kindref="compound">libdecklink/errors.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="display__mode_8hpp" kindref="compound">libdecklink/display_mode.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="class_deck_link_1_1_display_mode_1ad32caae55461f34f90e8e568b3f6bc1c" refkind="member"><highlight class="normal"><ref refid="class_deck_link_1_1_display_mode_1a0818cb1a584f455778ff0e1d93b8f921" kindref="member">DeckLink::DisplayMode::DisplayMode</ref>(<ref refid="class_i_deck_link_display_mode" kindref="compound">IDeckLinkDisplayMode</ref><sp/>*<ref refid="class_deck_link_1_1_bit_mask" kindref="compound">mode</ref>)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">assert</ref>(<ref refid="class_deck_link_1_1_bit_mask" kindref="compound">mode</ref>);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_deck_link_1_1_display_mode_1a128a038706d558a5c73372bc0b8024ab" kindref="member">_width</ref><sp/>=<sp/><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">mode</ref>-&gt;GetWidth();</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_deck_link_1_1_display_mode_1a760bc42ba727976a107a956cfedcb5b9" kindref="member">_height</ref><sp/>=<sp/><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">mode</ref>-&gt;GetHeight();</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_deck_link_1_1_display_mode_1a83a4c5fe71ea1edcfbc5d0f4b4d2469b" kindref="member">_raw_mode</ref><sp/>=<sp/><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">mode</ref>-&gt;GetDisplayMode();</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_deck_link_1_1_display_mode_1a0c53f90221502826d3719d67e6adb876" kindref="member">_flags</ref><sp/>=<sp/><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">BitMask&lt;DisplayModeFlags&gt;</ref>(<ref refid="class_deck_link_1_1_bit_mask" kindref="compound">mode</ref>-&gt;GetFlags());</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_deck_link_1_1_display_mode_1a0ee8fb78426c5bc815d3fce71a142516" kindref="member">_field_dominance</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespace_deck_link_1a7c6679feb8ce86cae4c6201599c7c875" kindref="member">FieldDominance</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="class_deck_link_1_1_bit_mask" kindref="compound">mode</ref>-&gt;GetFieldDominance());</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>framerate<sp/>is<sp/>stored<sp/>in<sp/>a<sp/>weird<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_deck_link_a_p_i_types_8h_1a978812ad7ab5ee0a1a0bc3fc2babc01a" kindref="member">BMDTimeValue</ref><sp/><sp/><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">time_value</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_deck_link_a_p_i_types_8h_1a93cd3314ee8f29f0407d34108cdfec10" kindref="member">BMDTimeScale</ref><sp/><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">time_scale</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_linux_c_o_m_8h_1a570a903331bed6f464de16e2b037f108" kindref="member">HRESULT</ref><sp/><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">result</ref><sp/>=<sp/><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">mode</ref>-&gt;GetFrameRate(&amp;<ref refid="class_deck_link_1_1_bit_mask" kindref="compound">time_value</ref>,<sp/>&amp;<ref refid="class_deck_link_1_1_bit_mask" kindref="compound">time_scale</ref>)<sp/>!=<sp/><ref refid="_linux_c_o_m_8h_1a14bc2dfa42241600d567369cd25ddc70" kindref="member">S_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">BOOST_THROW_EXCEPTION</ref>(<ref refid="struct_deck_link_1_1decklink__driver__error" kindref="compound">decklink_driver_error</ref>()</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="namespace_deck_link_1ad8d01de64a88790fae5052482007223a" kindref="member">errmsg</ref>(</highlight><highlight class="stringliteral">&quot;Unkown<sp/>failure<sp/>when<sp/>calling<sp/>GetFrameRate<sp/>on<sp/>IDeckLinkDisplayMode&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="namespace_deck_link_1a09e9870449661e608f35fa3dc7732e90" kindref="member">decklink_error_code</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespace_deck_link_1aa7de3958a3ba62a453b649089d1b92d2" kindref="member">HResult</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="class_deck_link_1_1_bit_mask" kindref="compound">result</ref>))</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_deck_link_1_1_display_mode_1a8d38c1e2b6598276b4ef323e823bddbb" kindref="member">_framerate</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="class_deck_link_1_1_bit_mask" kindref="compound">time_scale</ref>)<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="class_deck_link_1_1_bit_mask" kindref="compound">time_value</ref>);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="class_deck_link_1_1_bit_mask" kindref="compound">buf</ref>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_linux_c_o_m_8h_1a570a903331bed6f464de16e2b037f108" kindref="member">HRESULT</ref><sp/><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">result</ref><sp/>=<sp/><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">mode</ref>-&gt;GetName(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;<ref refid="class_deck_link_1_1_bit_mask" kindref="compound">buf</ref>))<sp/>!=<sp/><ref refid="_linux_c_o_m_8h_1a14bc2dfa42241600d567369cd25ddc70" kindref="member">S_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">BOOST_THROW_EXCEPTION</ref>(<ref refid="struct_deck_link_1_1decklink__driver__error" kindref="compound">decklink_driver_error</ref>()</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="namespace_deck_link_1ad8d01de64a88790fae5052482007223a" kindref="member">errmsg</ref>(</highlight><highlight class="stringliteral">&quot;Unkown<sp/>failure<sp/>when<sp/>calling<sp/>GetName<sp/>on<sp/>IDeckLinkDisplayMode&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="namespace_deck_link_1a09e9870449661e608f35fa3dc7732e90" kindref="member">decklink_error_code</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespace_deck_link_1aa7de3958a3ba62a453b649089d1b92d2" kindref="member">HResult</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="class_deck_link_1_1_bit_mask" kindref="compound">result</ref>))</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">assert</ref>(<ref refid="class_deck_link_1_1_bit_mask" kindref="compound">buf</ref>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_deck_link_1_1_display_mode_1a282af3e816a2f5c0b51626762774a7b3" kindref="member">_name</ref><sp/>=<sp/>std::string(<ref refid="class_deck_link_1_1_bit_mask" kindref="compound">buf</ref>);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">free</ref>(<ref refid="class_deck_link_1_1_bit_mask" kindref="compound">buf</ref>);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_deck_link_1_1_display_mode_1a641ccf33b2bb9986e5ee074087b78bf3" kindref="member">_valid</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/libdecklink/display_mode.cpp"/>
  </compounddef>
</doxygen>
