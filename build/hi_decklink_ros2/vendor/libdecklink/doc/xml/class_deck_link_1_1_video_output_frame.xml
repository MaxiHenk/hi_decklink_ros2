<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="class_deck_link_1_1_video_output_frame" kind="class" language="C++" prot="public">
    <compoundname>DeckLink::VideoOutputFrame</compoundname>
    <basecompoundref refid="class_deck_link_1_1_video_frame" prot="public" virt="non-virtual">DeckLink::VideoFrame</basecompoundref>
    <includes refid="video__output__frame_8hpp" local="no">video_output_frame.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_deck_link_1_1_video_output_frame_1a1c40016e8b98e9da90e5e4cd2ca989a9" prot="private" static="no" mutable="no">
        <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">IDeckLinkMutableVideoFrame</ref> *</type>
        <definition>IDeckLinkMutableVideoFrame* DeckLink::VideoOutputFrame::_raw_output_frame</definition>
        <argsstring></argsstring>
        <name>_raw_output_frame</name>
        <qualifiedname>DeckLink::VideoOutputFrame::_raw_output_frame</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/video_output_frame.hpp" line="25" column="36" bodyfile="include/libdecklink/video_output_frame.hpp" bodystart="25" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_deck_link_1_1_video_output_frame_1a630a3301cbbd9d042ef0138ec280443e" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>DeckLink::VideoOutputFrame::VideoOutputFrame</definition>
        <argsstring>(IDeckLinkMutableVideoFrame *raw_output_frame)</argsstring>
        <name>VideoOutputFrame</name>
        <qualifiedname>DeckLink::VideoOutputFrame::VideoOutputFrame</qualifiedname>
        <param>
          <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">IDeckLinkMutableVideoFrame</ref> *</type>
          <declname>raw_output_frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/video_output_frame.hpp" line="13" column="18" bodyfile="src/libdecklink/video_output_frame.cpp" bodystart="12" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="class_deck_link_1_1_video_output_frame_1a257f3ed57fd31aec1657dc216d4b7da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DeckLink::VideoOutputFrame::~VideoOutputFrame</definition>
        <argsstring>() override</argsstring>
        <name>~VideoOutputFrame</name>
        <qualifiedname>DeckLink::VideoOutputFrame::~VideoOutputFrame</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/video_output_frame.hpp" line="15" column="9" bodyfile="src/libdecklink/video_output_frame.cpp" bodystart="20" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="class_deck_link_1_1_video_output_frame_1ad7ba1bbbaac2587f53095292e901d8c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_deck_link_1_1_video_output_frame" kindref="compound">VideoOutputFrame</ref> &amp;</type>
        <definition>VideoOutputFrame &amp; DeckLink::VideoOutputFrame::load</definition>
        <argsstring>(const std::vector&lt; unsigned char &gt; &amp;data)</argsstring>
        <name>load</name>
        <qualifiedname>DeckLink::VideoOutputFrame::load</qualifiedname>
        <param>
          <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">const</ref> std::vector&lt; <ref refid="class_deck_link_1_1_bit_mask" kindref="compound">unsigned</ref> <ref refid="class_deck_link_1_1_bit_mask" kindref="compound">char</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/video_output_frame.hpp" line="17" column="26" bodyfile="src/libdecklink/video_output_frame.cpp" bodystart="25" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="class_deck_link_1_1_video_output_frame_1a2c51dc025c6306285b8bc3d3f900c2ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_deck_link_1_1_video_output_frame" kindref="compound">VideoOutputFrame</ref> &amp;</type>
        <definition>VideoOutputFrame &amp; DeckLink::VideoOutputFrame::load</definition>
        <argsstring>(const unsigned char *data_start, size_t data_size)</argsstring>
        <name>load</name>
        <qualifiedname>DeckLink::VideoOutputFrame::load</qualifiedname>
        <param>
          <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">const</ref> <ref refid="class_deck_link_1_1_bit_mask" kindref="compound">unsigned</ref> <ref refid="class_deck_link_1_1_bit_mask" kindref="compound">char</ref> *</type>
          <declname>data_start</declname>
        </param>
        <param>
          <type><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">size_t</ref></type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libdecklink/video_output_frame.hpp" line="19" column="26" bodyfile="src/libdecklink/video_output_frame.cpp" bodystart="42" bodyend="56"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>DeckLink::VideoFrame</label>
        <link refid="class_deck_link_1_1_video_frame"/>
      </node>
      <node id="1">
        <label>DeckLink::VideoOutputFrame</label>
        <link refid="class_deck_link_1_1_video_output_frame"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>DeckLink::VideoFrame</label>
        <link refid="class_deck_link_1_1_video_frame"/>
      </node>
      <node id="1">
        <label>DeckLink::VideoOutputFrame</label>
        <link refid="class_deck_link_1_1_video_output_frame"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/libdecklink/video_output_frame.hpp" line="11" column="5" bodyfile="include/libdecklink/video_output_frame.hpp" bodystart="11" bodyend="26"/>
    <listofallmembers>
      <member refid="class_deck_link_1_1_video_frame_1a8af5d37f2d0193bda1015477e17ec13c" prot="private" virt="non-virtual"><scope>DeckLink::VideoOutputFrame</scope><name>_frame_data</name></member>
      <member refid="class_deck_link_1_1_video_frame_1a5f05c4da22ef382619f9ddea2b174050" prot="private" virt="non-virtual"><scope>DeckLink::VideoOutputFrame</scope><name>_height</name></member>
      <member refid="class_deck_link_1_1_video_frame_1ac6ebcc1542ff4b20061deaa5e065dbbb" prot="private" virt="non-virtual"><scope>DeckLink::VideoOutputFrame</scope><name>_px_format</name></member>
      <member refid="class_deck_link_1_1_video_frame_1aa7269c29a030fe8063d20a6752ab2d02" prot="private" virt="non-virtual"><scope>DeckLink::VideoOutputFrame</scope><name>_raw_frame</name></member>
      <member refid="class_deck_link_1_1_video_output_frame_1a1c40016e8b98e9da90e5e4cd2ca989a9" prot="private" virt="non-virtual"><scope>DeckLink::VideoOutputFrame</scope><name>_raw_output_frame</name></member>
      <member refid="class_deck_link_1_1_video_frame_1a3b24bbb03e74ec6ea1dc5e5ff8b59adf" prot="private" virt="non-virtual"><scope>DeckLink::VideoOutputFrame</scope><name>_row_bytes</name></member>
      <member refid="class_deck_link_1_1_video_frame_1aa629c9c8cc7973cd6a1e58b589348daf" prot="private" virt="non-virtual"><scope>DeckLink::VideoOutputFrame</scope><name>_width</name></member>
      <member refid="class_deck_link_1_1_video_frame_1aa02aac382c4e273131c86ed3f50f68c3" prot="public" virt="non-virtual"><scope>DeckLink::VideoOutputFrame</scope><name>bytes</name></member>
      <member refid="class_deck_link_1_1_video_frame_1a436307aa1554af0619982bfd39641ed6" prot="public" virt="non-virtual"><scope>DeckLink::VideoOutputFrame</scope><name>end</name></member>
      <member refid="class_deck_link_1_1_video_frame_1a4947c5b5863daf437ac2c25fa12da461" prot="public" virt="non-virtual"><scope>DeckLink::VideoOutputFrame</scope><name>get_raw_ptr</name></member>
      <member refid="class_deck_link_1_1_video_frame_1a6aa080189b183910eef998d804955497" prot="public" virt="non-virtual"><scope>DeckLink::VideoOutputFrame</scope><name>height</name></member>
      <member refid="class_deck_link_1_1_video_output_frame_1ad7ba1bbbaac2587f53095292e901d8c7" prot="public" virt="non-virtual"><scope>DeckLink::VideoOutputFrame</scope><name>load</name></member>
      <member refid="class_deck_link_1_1_video_output_frame_1a2c51dc025c6306285b8bc3d3f900c2ce" prot="public" virt="non-virtual"><scope>DeckLink::VideoOutputFrame</scope><name>load</name></member>
      <member refid="class_deck_link_1_1_video_frame_1aba801632491524f83e0fcf244eba7df8" prot="public" virt="non-virtual"><scope>DeckLink::VideoOutputFrame</scope><name>pixel_format</name></member>
      <member refid="class_deck_link_1_1_video_frame_1a2e8f75f0577266d2d2637f0b4224a88c" prot="public" virt="non-virtual"><scope>DeckLink::VideoOutputFrame</scope><name>row_bytes</name></member>
      <member refid="class_deck_link_1_1_video_frame_1a5998ebc13690356f9eee0f53f026297f" prot="public" virt="non-virtual"><scope>DeckLink::VideoOutputFrame</scope><name>size</name></member>
      <member refid="class_deck_link_1_1_video_frame_1a73d260b2f8670cfafb744ed34c158108" prot="public" virt="non-virtual"><scope>DeckLink::VideoOutputFrame</scope><name>start</name></member>
      <member refid="class_deck_link_1_1_video_frame_1afa87452ac58e5e014aa844db19be3d8a" prot="public" virt="non-virtual"><scope>DeckLink::VideoOutputFrame</scope><name>timecode</name></member>
      <member refid="class_deck_link_1_1_video_frame_1a09b1a352215dadac351040f24af833e8" prot="public" virt="non-virtual"><scope>DeckLink::VideoOutputFrame</scope><name>VideoFrame</name></member>
      <member refid="class_deck_link_1_1_video_output_frame_1a630a3301cbbd9d042ef0138ec280443e" prot="public" virt="non-virtual"><scope>DeckLink::VideoOutputFrame</scope><name>VideoOutputFrame</name></member>
      <member refid="class_deck_link_1_1_video_frame_1abc248e5bcdfd3c90c09901f6389e9add" prot="public" virt="non-virtual"><scope>DeckLink::VideoOutputFrame</scope><name>width</name></member>
      <member refid="class_deck_link_1_1_video_frame_1a5c9a1c9eb2a7dfd6ab728404a03d145b" prot="public" virt="virtual"><scope>DeckLink::VideoOutputFrame</scope><name>~VideoFrame</name></member>
      <member refid="class_deck_link_1_1_video_output_frame_1a257f3ed57fd31aec1657dc216d4b7da0" prot="public" virt="non-virtual"><scope>DeckLink::VideoOutputFrame</scope><name>~VideoOutputFrame</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
