<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="video__output__frame_8cpp" kind="file" language="C++">
    <compoundname>video_output_frame.cpp</compoundname>
    <includes refid="device_8hpp" local="no">libdecklink/device.hpp</includes>
    <includes refid="interface__helper_8hpp" local="yes">libdecklink/interface_helper.hpp</includes>
    <includes refid="video__output__frame_8hpp" local="yes">libdecklink/video_output_frame.hpp</includes>
    <incdepgraph>
      <node id="7">
        <label>decklink_sdk/DeckLinkAPI.h</label>
        <link refid="_deck_link_a_p_i_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>DeckLinkAPIConfiguration.h</label>
        <link refid="_deck_link_a_p_i_configuration_8h"/>
      </node>
      <node id="14">
        <label>DeckLinkAPIDeckControl.h</label>
        <link refid="_deck_link_a_p_i_deck_control_8h"/>
      </node>
      <node id="12">
        <label>DeckLinkAPIDiscovery.h</label>
        <link refid="_deck_link_a_p_i_discovery_8h"/>
      </node>
      <node id="11">
        <label>DeckLinkAPIModes.h</label>
        <link refid="_deck_link_a_p_i_modes_8h"/>
      </node>
      <node id="10">
        <label>DeckLinkAPITypes.h</label>
        <link refid="_deck_link_a_p_i_types_8h"/>
      </node>
      <node id="9">
        <label>LinuxCOM.h</label>
        <link refid="_linux_c_o_m_8h"/>
      </node>
      <node id="22">
        <label>libdecklink/bitmask.hpp</label>
        <link refid="bitmask_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>libdecklink/capture_callback.hpp</label>
        <link refid="capture__callback_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>libdecklink/decklink_handle_deleter.hpp</label>
        <link refid="decklink__handle__deleter_8hpp"/>
      </node>
      <node id="2">
        <label>libdecklink/device.hpp</label>
        <link refid="device_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>libdecklink/device_input_interface.hpp</label>
        <link refid="device__input__interface_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>libdecklink/device_output_interface.hpp</label>
        <link refid="device__output__interface_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>libdecklink/display_mode.hpp</label>
        <link refid="display__mode_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>libdecklink/dummy_reference_counted.hpp</label>
        <link refid="dummy__reference__counted_8hpp"/>
      </node>
      <node id="15">
        <label>libdecklink/errors.hpp</label>
        <link refid="errors_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>libdecklink/interface_helper.hpp</label>
        <link refid="interface__helper_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>libdecklink/notification_callback.hpp</label>
        <link refid="notification__callback_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>libdecklink/types.hpp</label>
        <link refid="types_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>libdecklink/video_frame.hpp</label>
        <link refid="video__frame_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>libdecklink/video_input_frame.hpp</label>
        <link refid="video__input__frame_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>libdecklink/video_output_frame.hpp</label>
        <link refid="video__output__frame_8hpp"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/libdecklink/video_output_frame.cpp</label>
        <link refid="video__output__frame_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>array</label>
      </node>
      <node id="16">
        <label>boost/exception/all.hpp</label>
      </node>
      <node id="6">
        <label>boost/noncopyable.hpp</label>
      </node>
      <node id="5">
        <label>boost/optional.hpp</label>
      </node>
      <node id="27">
        <label>functional</label>
      </node>
      <node id="24">
        <label>initializer_list</label>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
      <node id="8">
        <label>stdint.h</label>
      </node>
      <node id="18">
        <label>string</label>
      </node>
      <node id="23">
        <label>type_traits</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_deck_link">DeckLink</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>tibo<sp/>and<sp/>paola<sp/>on<sp/>21/02/18.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="device_8hpp" kindref="compound">libdecklink/device.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="interface__helper_8hpp" kindref="compound">libdecklink/interface_helper.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="video__output__frame_8hpp" kindref="compound">libdecklink/video_output_frame.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_deck_link" kindref="compound">DeckLink</ref><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="class_deck_link_1_1_video_output_frame_1a630a3301cbbd9d042ef0138ec280443e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_deck_link_1_1_video_output_frame_1a630a3301cbbd9d042ef0138ec280443e" kindref="member">VideoOutputFrame::VideoOutputFrame</ref>(<ref refid="class_deck_link_1_1_bit_mask" kindref="compound">IDeckLinkMutableVideoFrame</ref><sp/>*<ref refid="class_deck_link_1_1_bit_mask" kindref="compound">raw_output_frame</ref>)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_deck_link_1_1_video_frame" kindref="compound">VideoFrame</ref>(<ref refid="class_deck_link_1_1_bit_mask" kindref="compound">static_cast</ref>&lt;<ref refid="class_deck_link_1_1_bit_mask" kindref="compound">IDeckLinkVideoFrame</ref><sp/>*&gt;(<ref refid="class_deck_link_1_1_bit_mask" kindref="compound">raw_output_frame</ref>))</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>_raw_output_frame(<ref refid="class_deck_link_1_1_bit_mask" kindref="compound">raw_output_frame</ref>)</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>nothing<sp/>-<sp/>Specifically<sp/>we<sp/>shouldn&apos;t<sp/>call<sp/>AddRef<sp/>since<sp/>we<sp/>should<sp/>be<sp/>the<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>owner<sp/>of<sp/>the<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="class_deck_link_1_1_video_output_frame_1a257f3ed57fd31aec1657dc216d4b7da0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_deck_link_1_1_video_output_frame_1a257f3ed57fd31aec1657dc216d4b7da0" kindref="member">VideoOutputFrame::~VideoOutputFrame</ref>()<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_deck_link_1_1_video_output_frame_1a1c40016e8b98e9da90e5e4cd2ca989a9" kindref="member">_raw_output_frame</ref>-&gt;Release();</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="25" refid="class_deck_link_1_1_video_output_frame_1ad7ba1bbbaac2587f53095292e901d8c7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_deck_link_1_1_video_output_frame" kindref="compound">VideoOutputFrame</ref>&amp;<sp/><ref refid="class_deck_link_1_1_video_output_frame_1ad7ba1bbbaac2587f53095292e901d8c7" kindref="member">VideoOutputFrame::load</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data.empty())<sp/><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">BOOST_THROW_EXCEPTION</ref>(<ref refid="struct_deck_link_1_1empty__image__error" kindref="compound">empty_image_error</ref>());</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">data_size</ref><sp/>=<sp/>data.size()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(data[0]);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_deck_link_1_1_bit_mask" kindref="compound">data_size</ref><sp/>!=<sp/><ref refid="class_deck_link_1_1_video_frame_1a5998ebc13690356f9eee0f53f026297f" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">BOOST_THROW_EXCEPTION</ref>(<ref refid="struct_deck_link_1_1size__error" kindref="compound">size_error</ref>()</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="namespace_deck_link_1ad8d01de64a88790fae5052482007223a" kindref="member">errmsg</ref>(</highlight><highlight class="stringliteral">&quot;VideoOutputFrame<sp/>buffer<sp/>and<sp/>provided<sp/>buffer<sp/>sizes<sp/>do<sp/>not<sp/>match&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="namespace_deck_link_1ada2f9a95493420f55bbb0e09cced1ee3" kindref="member">actual_size</ref>(<ref refid="class_deck_link_1_1_bit_mask" kindref="compound">data_size</ref>)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="namespace_deck_link_1acf911e1fd9a41f8913b7ecbeea14c017" kindref="member">expected_size</ref>(<ref refid="class_deck_link_1_1_video_frame_1a5998ebc13690356f9eee0f53f026297f" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(data.begin(),<sp/>data.end(),<sp/><ref refid="class_deck_link_1_1_video_frame_1aa02aac382c4e273131c86ed3f50f68c3" kindref="member">bytes</ref>());</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="42" refid="class_deck_link_1_1_video_output_frame_1a2c51dc025c6306285b8bc3d3f900c2ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_deck_link_1_1_video_output_frame" kindref="compound">VideoOutputFrame</ref>&amp;<sp/><ref refid="class_deck_link_1_1_video_output_frame_1ad7ba1bbbaac2587f53095292e901d8c7" kindref="member">VideoOutputFrame::load</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="class_deck_link_1_1_bit_mask" kindref="compound">data_start</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">data_size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_deck_link_1_1_bit_mask" kindref="compound">data_start</ref>)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">BOOST_THROW_EXCEPTION</ref>(<ref refid="struct_deck_link_1_1null__pointer__error" kindref="compound">null_pointer_error</ref>()<sp/>&lt;&lt;<sp/><ref refid="namespace_deck_link_1ad8d01de64a88790fae5052482007223a" kindref="member">errmsg</ref>(</highlight><highlight class="stringliteral">&quot;`data_start`<sp/>cannot<sp/>be<sp/>null&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_deck_link_1_1_bit_mask" kindref="compound">data_size</ref><sp/>!=<sp/><ref refid="class_deck_link_1_1_video_frame_1a5998ebc13690356f9eee0f53f026297f" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">BOOST_THROW_EXCEPTION</ref>(<ref refid="struct_deck_link_1_1size__error" kindref="compound">size_error</ref>()</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="namespace_deck_link_1ad8d01de64a88790fae5052482007223a" kindref="member">errmsg</ref>(</highlight><highlight class="stringliteral">&quot;VideoOutputFrame<sp/>buffer<sp/>and<sp/>provided<sp/>buffer<sp/>sizes<sp/>do<sp/>not<sp/>match&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="namespace_deck_link_1ada2f9a95493420f55bbb0e09cced1ee3" kindref="member">actual_size</ref>(<ref refid="class_deck_link_1_1_bit_mask" kindref="compound">data_size</ref>)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="namespace_deck_link_1acf911e1fd9a41f8913b7ecbeea14c017" kindref="member">expected_size</ref>(<ref refid="class_deck_link_1_1_video_frame_1a5998ebc13690356f9eee0f53f026297f" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(<ref refid="class_deck_link_1_1_bit_mask" kindref="compound">data_start</ref>,<sp/><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">data_start</ref><sp/>+<sp/><ref refid="class_deck_link_1_1_bit_mask" kindref="compound">data_size</ref>,<sp/><ref refid="class_deck_link_1_1_video_frame_1aa02aac382c4e273131c86ed3f50f68c3" kindref="member">bytes</ref>());</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/libdecklink/video_output_frame.cpp"/>
  </compounddef>
</doxygen>
