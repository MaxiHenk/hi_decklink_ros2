[0.000000] (-) TimerEvent: {}
[0.000316] (hi_decklink_ros2) JobQueued: {'identifier': 'hi_decklink_ros2', 'dependencies': OrderedDict()}
[0.000402] (hi_decklink_ros2) JobStarted: {'identifier': 'hi_decklink_ros2'}
[0.006803] (hi_decklink_ros2) JobProgress: {'identifier': 'hi_decklink_ros2', 'progress': 'cmake'}
[0.007960] (hi_decklink_ros2) JobProgress: {'identifier': 'hi_decklink_ros2', 'progress': 'build'}
[0.008076] (hi_decklink_ros2) Command: {'cmd': ['/usr/bin/cmake', '--build', '/home/mhenkel/Documents/hi_decklink_ros2/build/hi_decklink_ros2', '--', '-j8', '-l8'], 'cwd': '/home/mhenkel/Documents/hi_decklink_ros2/build/hi_decklink_ros2', 'env': OrderedDict({'LESSOPEN': '| /usr/bin/lesspipe %s', 'USER': 'mhenkel', 'GZ_CONFIG_PATH': '/opt/ros/jazzy/opt/sdformat_vendor/share/gz', 'XDG_SESSION_TYPE': 'wayland', 'SHLVL': '1', 'LD_LIBRARY_PATH': '/opt/ros/jazzy/opt/sdformat_vendor/lib:/opt/ros/jazzy/opt/rviz_ogre_vendor/lib:/opt/ros/jazzy/lib/x86_64-linux-gnu:/opt/ros/jazzy/opt/gz_math_vendor/lib:/opt/ros/jazzy/opt/gz_utils_vendor/lib:/opt/ros/jazzy/opt/gz_tools_vendor/lib:/opt/ros/jazzy/opt/gz_cmake_vendor/lib:/opt/ros/jazzy/lib', 'HOME': '/home/mhenkel', 'OLDPWD': '/home/mhenkel', 'DESKTOP_SESSION': 'ubuntu', 'ROS_PYTHON_VERSION': '3', 'GNOME_SHELL_SESSION_MODE': 'ubuntu', 'GTK_MODULES': 'gail:atk-bridge', 'PS0': '$(printf "%s" ${EPOCHREALTIME/./} >"$BYOBU_RUN_DIR/timer.$$")', 'MANAGERPID': '3312', 'SYSTEMD_EXEC_PID': '3785', 'GSM_SKIP_SSH_AGENT_WORKAROUND': 'true', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1006/bus', 'COLORTERM': 'truecolor', 'TERMINATOR_DBUS_NAME': 'net.tenshu.Terminator25ef4b219e3b005583550f2b0f9f990c3', 'GIO_LAUNCHED_DESKTOP_FILE_PID': '71356', 'GNOME_KEYRING_CONTROL': '/run/user/1006/keyring', 'DEBUGINFOD_URLS': 'https://debuginfod.ubuntu.com', 'IM_CONFIG_PHASE': '1', 'WAYLAND_DISPLAY': 'wayland-0', 'ROS_DISTRO': 'jazzy', 'LOGNAME': 'mhenkel', 'JOURNAL_STREAM': '9:21301', '_': '/usr/bin/colcon', 'ROS_VERSION': '2', 'MEMORY_PRESSURE_WATCH': '/sys/fs/cgroup/user.slice/user-1006.slice/user@1006.service/session.slice/org.gnome.SettingsDaemon.MediaKeys.service/memory.pressure', 'XDG_SESSION_CLASS': 'user', 'USERNAME': 'mhenkel', 'TERM': 'xterm-256color', 'GNOME_DESKTOP_SESSION_ID': 'this-is-deprecated', 'PATH': '/opt/ros/jazzy/opt/gz_tools_vendor/bin:/opt/ros/jazzy/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin', 'SESSION_MANAGER': 'local/pckjk02:@/tmp/.ICE-unix/3554,unix/pckjk02:/tmp/.ICE-unix/3554', 'INVOCATION_ID': '4d4ef63905ad4f64869ff44a2ea35c44', 'XDG_MENU_PREFIX': 'gnome-', 'GNOME_SETUP_DISPLAY': ':1', 'XDG_RUNTIME_DIR': '/run/user/1006', 'DISPLAY': ':0', 'TERMINATOR_DBUS_PATH': '/net/tenshu/Terminator2', 'LANG': 'en_US.UTF-8', 'XDG_CURRENT_DESKTOP': 'ubuntu:GNOME', 'XMODIFIERS': '@im=ibus', 'XDG_SESSION_DESKTOP': 'ubuntu', 'XAUTHORITY': '/run/user/1006/.mutter-Xwaylandauth.3LXNB3', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=00:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.avif=01;35:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:*~=00;90:*#=00;90:*.bak=00;90:*.crdownload=00;90:*.dpkg-dist=00;90:*.dpkg-new=00;90:*.dpkg-old=00;90:*.dpkg-tmp=00;90:*.old=00;90:*.orig=00;90:*.part=00;90:*.rej=00;90:*.rpmnew=00;90:*.rpmorig=00;90:*.rpmsave=00;90:*.swp=00;90:*.tmp=00;90:*.ucf-dist=00;90:*.ucf-new=00;90:*.ucf-old=00;90:', 'SSH_AUTH_SOCK': '/run/user/1006/keyring/ssh', 'ROS_DOMAIN_ID': '0', 'AMENT_PREFIX_PATH': '/opt/ros/jazzy', 'SHELL': '/bin/bash', 'TERMINATOR_UUID': 'urn:uuid:965cd91b-26e4-4971-b1e4-21a4543cbd1d', 'QT_ACCESSIBILITY': '1', 'GDMSESSION': 'ubuntu', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'BYOBU_CONFIG_DIR': '/home/mhenkel/.config/byobu', 'ROS_AUTOMATIC_DISCOVERY_RANGE': 'SUBNET', 'QT_IM_MODULE': 'ibus', 'BYOBU_RUN_DIR': '/dev/shm/byobu-mhenkel-4HjfKyoW', 'PWD': '/home/mhenkel/Documents/hi_decklink_ros2/build/hi_decklink_ros2', 'XDG_CONFIG_DIRS': '/etc/xdg/xdg-ubuntu:/etc/xdg', 'XDG_DATA_DIRS': '/usr/share/ubuntu:/usr/share/gnome:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop', 'PYTHONPATH': '/opt/ros/jazzy/lib/python3.12/site-packages', 'COLCON': '1', 'MEMORY_PRESSURE_WRITE': 'c29tZSAyMDAwMDAgMjAwMDAwMAA=', 'VTE_VERSION': '7600', 'CMAKE_PREFIX_PATH': '/opt/ros/jazzy/opt/sdformat_vendor:/opt/ros/jazzy/opt/gz_math_vendor:/opt/ros/jazzy/opt/gz_utils_vendor:/opt/ros/jazzy/opt/gz_tools_vendor:/opt/ros/jazzy/opt/gz_cmake_vendor:/opt/ros/jazzy'}), 'shell': False}
[0.063780] (hi_decklink_ros2) StdoutLine: {'line': b'[ 44%] Built target decklink\n'}
[0.093847] (hi_decklink_ros2) StdoutLine: {'line': b'[ 51%] Built target deckview\n'}
[0.094089] (hi_decklink_ros2) StdoutLine: {'line': b'[ 59%] Built target deckquery\n'}
[0.094268] (hi_decklink_ros2) StdoutLine: {'line': b'[ 66%] Built target deckstatus\n'}
[0.094424] (hi_decklink_ros2) StdoutLine: {'line': b'[ 74%] Built target deckmonitor\n'}
[0.097411] (hi_decklink_ros2) StdoutLine: {'line': b'[ 81%] Built target deckoutput\n'}
[0.099430] (-) TimerEvent: {}
[0.099605] (hi_decklink_ros2) StdoutLine: {'line': b'[ 88%] Built target img2ros\n'}
[0.122077] (hi_decklink_ros2) StdoutLine: {'line': b'[ 92%] \x1b[32mBuilding CXX object CMakeFiles/publisher.dir/src/decklink_camera_driver.cpp.o\x1b[0m\n'}
[0.199557] (-) TimerEvent: {}
[0.299827] (-) TimerEvent: {}
[0.400112] (-) TimerEvent: {}
[0.500344] (-) TimerEvent: {}
[0.600602] (-) TimerEvent: {}
[0.700871] (-) TimerEvent: {}
[0.801216] (-) TimerEvent: {}
[0.901504] (-) TimerEvent: {}
[1.001765] (-) TimerEvent: {}
[1.101999] (-) TimerEvent: {}
[1.202254] (-) TimerEvent: {}
[1.302550] (-) TimerEvent: {}
[1.402806] (-) TimerEvent: {}
[1.503065] (-) TimerEvent: {}
[1.603379] (-) TimerEvent: {}
[1.703666] (-) TimerEvent: {}
[1.803978] (-) TimerEvent: {}
[1.904318] (-) TimerEvent: {}
[2.004596] (-) TimerEvent: {}
[2.104879] (-) TimerEvent: {}
[2.205164] (-) TimerEvent: {}
[2.305448] (-) TimerEvent: {}
[2.405724] (-) TimerEvent: {}
[2.505991] (-) TimerEvent: {}
[2.606317] (-) TimerEvent: {}
[2.706615] (-) TimerEvent: {}
[2.806931] (-) TimerEvent: {}
[2.907231] (-) TimerEvent: {}
[3.007515] (-) TimerEvent: {}
[3.107905] (-) TimerEvent: {}
[3.208213] (-) TimerEvent: {}
[3.308484] (-) TimerEvent: {}
[3.408711] (-) TimerEvent: {}
[3.508939] (-) TimerEvent: {}
[3.609218] (-) TimerEvent: {}
[3.696750] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:\x1b[m\x1b[K In constructor \xe2\x80\x98\x1b[01m\x1b[KDeckLinkCameraDriver::\x1b[01;32m\x1b[KDeckLinkCameraDriver\x1b[m\x1b[K()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.697038] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:32:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++ forbids taking the address of an unqualified or parenthesized non-static member function to form a pointer to member function.  Say \xe2\x80\x98\x1b[01m\x1b[K&DeckLinkCameraDriver::on_start_capture_request\x1b[m\x1b[K\xe2\x80\x99 [\x1b[01;31m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-fpermissive\x07-fpermissive\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[3.697221] (hi_decklink_ros2) StderrLine: {'line': b'   32 |         &\x1b[01;31m\x1b[Kon_start_capture_request\x1b[m\x1b[K\n'}
[3.697374] (hi_decklink_ros2) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.698115] (hi_decklink_ros2) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/callback_group.hpp:28\x1b[m\x1b[K,\n'}
[3.698272] (hi_decklink_ros2) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[3.698405] (hi_decklink_ros2) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[3.698535] (hi_decklink_ros2) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[3.698668] (hi_decklink_ros2) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/executor_options.hpp:22\x1b[m\x1b[K,\n'}
[3.698787] (hi_decklink_ros2) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/executor.hpp:38\x1b[m\x1b[K,\n'}
[3.698917] (hi_decklink_ros2) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[3.699043] (hi_decklink_ros2) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[3.699180] (hi_decklink_ros2) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/rclcpp.hpp:172\x1b[m\x1b[K,\n'}
[3.699310] (hi_decklink_ros2) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/include/decklink_camera_driver.hpp:10\x1b[m\x1b[K,\n'}
[3.699430] (hi_decklink_ros2) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:9\x1b[m\x1b[K:\n'}
[3.699560] (hi_decklink_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/service.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kclass rclcpp::Service<bool>\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.699685] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/node.hpp:318:3:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ServiceT, class CallbackT> typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = bool; CallbackT = <missing>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.699815] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:30:48:\x1b[m\x1b[K   required from here\n'}
[3.699935] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/service.hpp:289:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kbool\x1b[m\x1b[K\xe2\x80\x99 is not a class, struct, or union type\n'}
[3.700093] (hi_decklink_ros2) StderrLine: {'line': b'  289 |   using \x1b[01;31m\x1b[KCallbackType\x1b[m\x1b[K = std::function<\n'}
[3.700679] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.700817] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/service.hpp:294:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kbool\x1b[m\x1b[K\xe2\x80\x99 is not a class, struct, or union type\n'}
[3.700961] (hi_decklink_ros2) StderrLine: {'line': b'  294 |   using \x1b[01;31m\x1b[KCallbackWithHeaderType\x1b[m\x1b[K = std::function<\n'}
[3.701093] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.701235] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/service.hpp:455:3:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kbool\x1b[m\x1b[K\xe2\x80\x99 is not a class, struct, or union type\n'}
[3.701363] (hi_decklink_ros2) StderrLine: {'line': b'  455 |   \x1b[01;31m\x1b[Ktake_request\x1b[m\x1b[K(typename ServiceT::Request & request_out, rmw_request_id_t & request_id_out)\n'}
[3.701491] (hi_decklink_ros2) StderrLine: {'line': b'      |   \x1b[01;31m\x1b[K^~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.701618] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/service.hpp:485:3:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kbool\x1b[m\x1b[K\xe2\x80\x99 is not a class, struct, or union type\n'}
[3.701741] (hi_decklink_ros2) StderrLine: {'line': b'  485 |   \x1b[01;31m\x1b[Ksend_response\x1b[m\x1b[K(rmw_request_id_t & req_id, typename ServiceT::Response & response)\n'}
[3.701860] (hi_decklink_ros2) StderrLine: {'line': b'      |   \x1b[01;31m\x1b[K^~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.701979] (hi_decklink_ros2) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/service.hpp:37\x1b[m\x1b[K:\n'}
[3.702098] (hi_decklink_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kclass rclcpp::AnyServiceCallback<bool>\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.702238] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/service.hpp:532:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kclass rclcpp::Service<bool>\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.702360] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/node.hpp:318:3:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ServiceT, class CallbackT> typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = bool; CallbackT = <missing>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.702501] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:30:48:\x1b[m\x1b[K   required from here\n'}
[3.702619] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:154:3:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kbool\x1b[m\x1b[K\xe2\x80\x99 is not a class, struct, or union type\n'}
[3.702742] (hi_decklink_ros2) StderrLine: {'line': b'  154 |   \x1b[01;31m\x1b[Kdispatch\x1b[m\x1b[K(\n'}
[3.702861] (hi_decklink_ros2) StderrLine: {'line': b'      |   \x1b[01;31m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.702991] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:207:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kbool\x1b[m\x1b[K\xe2\x80\x99 is not a class, struct, or union type\n'}
[3.703115] (hi_decklink_ros2) StderrLine: {'line': b'  207 |   using \x1b[01;31m\x1b[KSharedPtrCallback\x1b[m\x1b[K = std::function<\n'}
[3.703253] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.703371] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:212:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kbool\x1b[m\x1b[K\xe2\x80\x99 is not a class, struct, or union type\n'}
[3.703485] (hi_decklink_ros2) StderrLine: {'line': b'  212 |   using \x1b[01;31m\x1b[KSharedPtrWithRequestHeaderCallback\x1b[m\x1b[K = std::function<\n'}
[3.703609] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.703724] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:218:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kbool\x1b[m\x1b[K\xe2\x80\x99 is not a class, struct, or union type\n'}
[3.703841] (hi_decklink_ros2) StderrLine: {'line': b'  218 |   using \x1b[01;31m\x1b[KSharedPtrDeferResponseCallback\x1b[m\x1b[K = std::function<\n'}
[3.703953] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.704070] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:223:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kbool\x1b[m\x1b[K\xe2\x80\x99 is not a class, struct, or union type\n'}
[3.704211] (hi_decklink_ros2) StderrLine: {'line': b'  223 |   using \x1b[01;31m\x1b[KSharedPtrDeferResponseCallbackWithServiceHandle\x1b[m\x1b[K = std::function<\n'}
[3.704343] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.704458] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:235:54:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kbool\x1b[m\x1b[K\xe2\x80\x99 is not a class, struct, or union type\n'}
[3.704573] (hi_decklink_ros2) StderrLine: {'line': b'  235 |     SharedPtrDeferResponseCallbackWithServiceHandle> \x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K;\n'}
[3.704688] (hi_decklink_ros2) StderrLine: {'line': b'      |                                                      \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[3.704803] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:33:5:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Krclcpp::Service<std_srvs::srv::Empty>::SharedPtr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >\x1b[m\x1b[K\xe2\x80\x99} and \xe2\x80\x98\x1b[01m\x1b[Krclcpp::Service<bool>::SharedPtr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Service<bool> >\x1b[m\x1b[K\xe2\x80\x99})\n'}
[3.704926] (hi_decklink_ros2) StderrLine: {'line': b'   33 |     \x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[3.705040] (hi_decklink_ros2) StderrLine: {'line': b'      |     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[3.705162] (hi_decklink_ros2) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/13/memory:80\x1b[m\x1b[K,\n'}
[3.705280] (hi_decklink_ros2) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/jazzy/include/sensor_msgs/sensor_msgs/msg/detail/image__struct.hpp:13\x1b[m\x1b[K,\n'}
[3.705402] (hi_decklink_ros2) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/jazzy/include/sensor_msgs/sensor_msgs/msg/image.hpp:7\x1b[m\x1b[K,\n'}
[3.705518] (hi_decklink_ros2) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/jazzy/include/cv_bridge/cv_bridge/cv_bridge.hpp:40\x1b[m\x1b[K,\n'}
[3.705634] (hi_decklink_ros2) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:5\x1b[m\x1b[K:\n'}
[3.705750] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/bits/shared_ptr.h:418:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<const std::shared_ptr<_Yp>&> std::shared_ptr<_Tp>::\x1b[01;32m\x1b[Koperator=\x1b[m\x1b[K(const std::shared_ptr<_Yp>&) \x1b[35m\x1b[K[with _Tp = rclcpp::Service<std_srvs::srv::Empty>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.705876] (hi_decklink_ros2) StderrLine: {'line': b'  418 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const shared_ptr<_Yp>& __r) noexcept\n'}
[3.705992] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.706106] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/bits/shared_ptr.h:418:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[3.706236] (hi_decklink_ros2) StderrLine: {'line': b'/usr/include/c++/13/bits/shared_ptr.h: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> template<class _Arg> using std::shared_ptr<_Tp>::_Assignable = typename std::enable_if<std::is_assignable<std::__shared_ptr<_Tp>&, _Arg>::value, std::shared_ptr<_Tp>&>::type \x1b[35m\x1b[K[with _Arg = const std::shared_ptr<rclcpp::Service<bool> >&; _Tp = rclcpp::Service<std_srvs::srv::Empty>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.706366] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/bits/shared_ptr.h:418:2:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >::_Assignable<const std::shared_ptr<_Tp>&> std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >::\x1b[01;32m\x1b[Koperator=\x1b[m\x1b[K(const std::shared_ptr<_Tp>&) \x1b[35m\x1b[K[with _Yp = rclcpp::Service<bool>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.706486] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:33:5:\x1b[m\x1b[K   required from here\n'}
[3.706602] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/bits/shared_ptr.h:183:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.706721] (hi_decklink_ros2) StderrLine: {'line': b'  183 |         using \x1b[01;31m\x1b[K_Assignable\x1b[m\x1b[K = typename enable_if<\n'}
[3.706831] (hi_decklink_ros2) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.706946] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/bits/shared_ptr.h:429:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<std::auto_ptr<_Up> > std::shared_ptr<_Tp>::\x1b[01;32m\x1b[Koperator=\x1b[m\x1b[K(std::auto_ptr<_Up>&&) \x1b[35m\x1b[K[with _Tp = rclcpp::Service<std_srvs::srv::Empty>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.707069] (hi_decklink_ros2) StderrLine: {'line': b'  429 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(auto_ptr<_Yp>&& __r)\n'}
[3.707193] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.707306] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/bits/shared_ptr.h:429:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[3.707436] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:33:5:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  \xe2\x80\x98\x1b[01m\x1b[Krclcpp::Service<bool>::SharedPtr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Service<bool> >\x1b[m\x1b[K\xe2\x80\x99} is not derived from \xe2\x80\x98\x1b[01m\x1b[Kstd::auto_ptr<_Up>\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.707561] (hi_decklink_ros2) StderrLine: {'line': b'   33 |     \x1b[01;36m\x1b[K)\x1b[m\x1b[K;\n'}
[3.707680] (hi_decklink_ros2) StderrLine: {'line': b'      |     \x1b[01;36m\x1b[K^\x1b[m\x1b[K\n'}
[3.707792] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/bits/shared_ptr.h:446:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<std::shared_ptr<_Yp> > std::shared_ptr<_Tp>::\x1b[01;32m\x1b[Koperator=\x1b[m\x1b[K(std::shared_ptr<_Yp>&&) \x1b[35m\x1b[K[with _Tp = rclcpp::Service<std_srvs::srv::Empty>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.707944] (hi_decklink_ros2) StderrLine: {'line': b'  446 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(shared_ptr<_Yp>&& __r) noexcept\n'}
[3.708069] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.708209] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/bits/shared_ptr.h:446:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[3.708339] (hi_decklink_ros2) StderrLine: {'line': b'/usr/include/c++/13/bits/shared_ptr.h: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> template<class _Arg> using std::shared_ptr<_Tp>::_Assignable = typename std::enable_if<std::is_assignable<std::__shared_ptr<_Tp>&, _Arg>::value, std::shared_ptr<_Tp>&>::type \x1b[35m\x1b[K[with _Arg = std::shared_ptr<rclcpp::Service<bool> >; _Tp = rclcpp::Service<std_srvs::srv::Empty>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.708494] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/bits/shared_ptr.h:446:2:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >::_Assignable<std::shared_ptr<_Tp> > std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >::\x1b[01;32m\x1b[Koperator=\x1b[m\x1b[K(std::shared_ptr<_Tp>&&) \x1b[35m\x1b[K[with _Yp = rclcpp::Service<bool>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.708650] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:33:5:\x1b[m\x1b[K   required from here\n'}
[3.708799] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/bits/shared_ptr.h:183:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.708949] (hi_decklink_ros2) StderrLine: {'line': b'  183 |         using \x1b[01;31m\x1b[K_Assignable\x1b[m\x1b[K = typename enable_if<\n'}
[3.709067] (hi_decklink_ros2) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.709201] (-) TimerEvent: {}
[3.709313] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/bits/shared_ptr.h:454:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp, class _Del> std::shared_ptr<_Tp>::_Assignable<std::unique_ptr<_Up, _Ep> > std::shared_ptr<_Tp>::\x1b[01;32m\x1b[Koperator=\x1b[m\x1b[K(std::unique_ptr<_Up, _Ep>&&) \x1b[35m\x1b[K[with _Del = _Yp; _Tp = rclcpp::Service<std_srvs::srv::Empty>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.709483] (hi_decklink_ros2) StderrLine: {'line': b'  454 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(unique_ptr<_Yp, _Del>&& __r)\n'}
[3.709619] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.709736] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/bits/shared_ptr.h:454:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[3.709859] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:33:5:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  \xe2\x80\x98\x1b[01m\x1b[Krclcpp::Service<bool>::SharedPtr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Service<bool> >\x1b[m\x1b[K\xe2\x80\x99} is not derived from \xe2\x80\x98\x1b[01m\x1b[Kstd::unique_ptr<_Tp, _Dp>\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.709991] (hi_decklink_ros2) StderrLine: {'line': b'   33 |     \x1b[01;36m\x1b[K)\x1b[m\x1b[K;\n'}
[3.710113] (hi_decklink_ros2) StderrLine: {'line': b'      |     \x1b[01;36m\x1b[K^\x1b[m\x1b[K\n'}
[3.710244] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/bits/shared_ptr.h:414:19:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp>& std::shared_ptr<_Tp>::\x1b[01;32m\x1b[Koperator=\x1b[m\x1b[K(const std::shared_ptr<_Tp>&) \x1b[35m\x1b[K[with _Tp = rclcpp::Service<std_srvs::srv::Empty>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.710366] (hi_decklink_ros2) StderrLine: {'line': b'  414 |       shared_ptr& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const shared_ptr&) noexcept = default;\n'}
[3.710483] (hi_decklink_ros2) StderrLine: {'line': b'      |                   \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.710606] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/bits/shared_ptr.h:414:29:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::Service<bool>::SharedPtr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Service<bool> >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.710735] (hi_decklink_ros2) StderrLine: {'line': b'  414 |       shared_ptr& operator=(\x1b[01;36m\x1b[Kconst shared_ptr&\x1b[m\x1b[K) noexcept = default;\n'}
[3.710864] (hi_decklink_ros2) StderrLine: {'line': b'      |                             \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.710990] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/bits/shared_ptr.h:438:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp>& std::shared_ptr<_Tp>::\x1b[01;32m\x1b[Koperator=\x1b[m\x1b[K(std::shared_ptr<_Tp>&&) \x1b[35m\x1b[K[with _Tp = rclcpp::Service<std_srvs::srv::Empty>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.711117] (hi_decklink_ros2) StderrLine: {'line': b'  438 |       \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(shared_ptr&& __r) noexcept\n'}
[3.711252] (hi_decklink_ros2) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.711371] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/bits/shared_ptr.h:438:30:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::Service<bool>::SharedPtr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Service<bool> >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.711528] (hi_decklink_ros2) StderrLine: {'line': b'  438 |       operator=(\x1b[01;36m\x1b[Kshared_ptr&& __r\x1b[m\x1b[K) noexcept\n'}
[3.711653] (hi_decklink_ros2) StderrLine: {'line': b'      |                 \x1b[01;36m\x1b[K~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[3.711777] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:37:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[KISO C++ forbids taking the address of an unqualified or parenthesized non-static member function to form a pointer to member function.  Say \xe2\x80\x98\x1b[01m\x1b[K&DeckLinkCameraDriver::on_start_capture_request\x1b[m\x1b[K\xe2\x80\x99 [\x1b[01;31m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-fpermissive\x07-fpermissive\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[3.711913] (hi_decklink_ros2) StderrLine: {'line': b'   37 |         &\x1b[01;31m\x1b[Kon_start_capture_request\x1b[m\x1b[K\n'}
[3.712037] (hi_decklink_ros2) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.723861] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:87:42:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KDeckLinkCameraDriver::create_service(const char [14], void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >), DeckLinkCameraDriver*)\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.724392] (hi_decklink_ros2) StderrLine: {'line': b'   87 |     _start_capture = \x1b[01;31m\x1b[Kthis->create_service("start_capture",\x1b[m\x1b[K\n'}
[3.724531] (hi_decklink_ros2) StderrLine: {'line': b'      |                      \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.724664] (hi_decklink_ros2) StderrLine: {'line': b'   88 | \x1b[01;31m\x1b[K        &DeckLinkCameraDriver::on_start_capture_request, this)\x1b[m\x1b[K;\n'}
[3.724788] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.724914] (hi_decklink_ros2) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/executors/single_threaded_executor.hpp:28\x1b[m\x1b[K,\n'}
[3.725052] (hi_decklink_ros2) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/executors.hpp:22\x1b[m\x1b[K:\n'}
[3.725185] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/node.hpp:302:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ServiceT, class CallbackT> typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(const std::string&, CallbackT&&, const rmw_qos_profile_t&, rclcpp::CallbackGroup::SharedPtr)\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.725334] (hi_decklink_ros2) StderrLine: {'line': b'  302 |   \x1b[01;36m\x1b[Kcreate_service\x1b[m\x1b[K(\n'}
[3.725498] (hi_decklink_ros2) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.725650] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/node.hpp:302:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[3.725774] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:87:42:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  couldn\xe2\x80\x99t deduce template parameter \xe2\x80\x98\x1b[01m\x1b[KServiceT\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.725893] (hi_decklink_ros2) StderrLine: {'line': b'   87 |     _start_capture = \x1b[01;36m\x1b[Kthis->create_service("start_capture",\x1b[m\x1b[K\n'}
[3.726004] (hi_decklink_ros2) StderrLine: {'line': b'      |                      \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.726128] (hi_decklink_ros2) StderrLine: {'line': b'   88 | \x1b[01;36m\x1b[K        &DeckLinkCameraDriver::on_start_capture_request, this)\x1b[m\x1b[K;\n'}
[3.726273] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.726404] (hi_decklink_ros2) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/node.hpp:1663\x1b[m\x1b[K:\n'}
[3.726549] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:175:1:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ServiceT, class CallbackT> typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr)\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.726674] (hi_decklink_ros2) StderrLine: {'line': b'  175 | \x1b[01;36m\x1b[KNode\x1b[m\x1b[K::create_service(\n'}
[3.726802] (hi_decklink_ros2) StderrLine: {'line': b'      | \x1b[01;36m\x1b[K^~~~\x1b[m\x1b[K\n'}
[3.726921] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:175:1:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[3.727068] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:87:42:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  couldn\xe2\x80\x99t deduce template parameter \xe2\x80\x98\x1b[01m\x1b[KServiceT\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.727221] (hi_decklink_ros2) StderrLine: {'line': b'   87 |     _start_capture = \x1b[01;36m\x1b[Kthis->create_service("start_capture",\x1b[m\x1b[K\n'}
[3.727373] (hi_decklink_ros2) StderrLine: {'line': b'      |                      \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.727547] (hi_decklink_ros2) StderrLine: {'line': b'   88 | \x1b[01;36m\x1b[K        &DeckLinkCameraDriver::on_start_capture_request, this)\x1b[m\x1b[K;\n'}
[3.727676] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.727792] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:89:41:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KDeckLinkCameraDriver::create_service(const char [13], void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >), DeckLinkCameraDriver*)\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.727970] (hi_decklink_ros2) StderrLine: {'line': b'   89 |     _stop_capture = \x1b[01;31m\x1b[Kthis->create_service("stop_capture",\x1b[m\x1b[K\n'}
[3.728092] (hi_decklink_ros2) StderrLine: {'line': b'      |                     \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.728219] (hi_decklink_ros2) StderrLine: {'line': b'   90 | \x1b[01;31m\x1b[K        &DeckLinkCameraDriver::on_stop_capture_request, this)\x1b[m\x1b[K;\n'}
[3.728333] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.728449] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/node.hpp:302:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ServiceT, class CallbackT> typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(const std::string&, CallbackT&&, const rmw_qos_profile_t&, rclcpp::CallbackGroup::SharedPtr)\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.728577] (hi_decklink_ros2) StderrLine: {'line': b'  302 |   \x1b[01;36m\x1b[Kcreate_service\x1b[m\x1b[K(\n'}
[3.728696] (hi_decklink_ros2) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.728812] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/node.hpp:302:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[3.728932] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:89:41:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  couldn\xe2\x80\x99t deduce template parameter \xe2\x80\x98\x1b[01m\x1b[KServiceT\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.729051] (hi_decklink_ros2) StderrLine: {'line': b'   89 |     _stop_capture = \x1b[01;36m\x1b[Kthis->create_service("stop_capture",\x1b[m\x1b[K\n'}
[3.729174] (hi_decklink_ros2) StderrLine: {'line': b'      |                     \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.729301] (hi_decklink_ros2) StderrLine: {'line': b'   90 | \x1b[01;36m\x1b[K        &DeckLinkCameraDriver::on_stop_capture_request, this)\x1b[m\x1b[K;\n'}
[3.729421] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.729547] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:175:1:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ServiceT, class CallbackT> typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr)\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.729685] (hi_decklink_ros2) StderrLine: {'line': b'  175 | \x1b[01;36m\x1b[KNode\x1b[m\x1b[K::create_service(\n'}
[3.729804] (hi_decklink_ros2) StderrLine: {'line': b'      | \x1b[01;36m\x1b[K^~~~\x1b[m\x1b[K\n'}
[3.729920] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:175:1:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[3.730040] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:89:41:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  couldn\xe2\x80\x99t deduce template parameter \xe2\x80\x98\x1b[01m\x1b[KServiceT\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.730167] (hi_decklink_ros2) StderrLine: {'line': b'   89 |     _stop_capture = \x1b[01;36m\x1b[Kthis->create_service("stop_capture",\x1b[m\x1b[K\n'}
[3.730287] (hi_decklink_ros2) StderrLine: {'line': b'      |                     \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.730404] (hi_decklink_ros2) StderrLine: {'line': b'   90 | \x1b[01;36m\x1b[K        &DeckLinkCameraDriver::on_stop_capture_request, this)\x1b[m\x1b[K;\n'}
[3.730524] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.809326] (-) TimerEvent: {}
[3.909669] (-) TimerEvent: {}
[4.009948] (-) TimerEvent: {}
[4.110207] (-) TimerEvent: {}
[4.210494] (-) TimerEvent: {}
[4.310763] (-) TimerEvent: {}
[4.383305] (hi_decklink_ros2) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/client.hpp:42\x1b[m\x1b[K,\n'}
[4.383627] (hi_decklink_ros2) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/callback_group.hpp:24\x1b[m\x1b[K:\n'}
[4.383766] (hi_decklink_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/function_traits.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kstruct rclcpp::function_traits::function_traits<void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.383904] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/function_traits.hpp:165:8:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct rclcpp::function_traits::same_arguments<void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >), std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.384050] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:121:10:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::\x1b[01;32m\x1b[Kset\x1b[m\x1b[K(CallbackT&&) \x1b[35m\x1b[K[with CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename std::enable_if<rclcpp::detail::can_be_nullptr<CallbackT>::value, int>::type <anonymous> = 0; ServiceT = std_srvs::srv::Empty]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.384294] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.384443] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.384694] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.385184] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:35:63:\x1b[m\x1b[K   required from here\n'}
[4.385609] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/function_traits.hpp:52:40:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Koperator()\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kvoid (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.385862] (hi_decklink_ros2) StderrLine: {'line': b'   52 |     typename function_traits<decltype( \x1b[01;31m\x1b[K&FunctionT::operator()\x1b[m\x1b[K)>::arguments>::type;\n'}
[4.386005] (hi_decklink_ros2) StderrLine: {'line': b'      |                                        \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.386129] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/function_traits.hpp:52:40:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Koperator()\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kvoid (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.386290] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/function_traits.hpp:52:40:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Koperator()\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kvoid (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.386434] (hi_decklink_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::\x1b[01;32m\x1b[Kset\x1b[m\x1b[K(CallbackT&&) \x1b[35m\x1b[K[with CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename std::enable_if<rclcpp::detail::can_be_nullptr<CallbackT>::value, int>::type <anonymous> = 0; ServiceT = std_srvs::srv::Empty]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.386583] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.386783] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.386999] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.387644] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:35:63:\x1b[m\x1b[K   required from here\n'}
[4.387925] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:121:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvalue\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::function_traits::same_arguments<void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >), std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.388066] (hi_decklink_ros2) StderrLine: {'line': b'  121 |       >::\x1b[01;31m\x1b[Kvalue\x1b[m\x1b[K)\n'}
[4.388217] (hi_decklink_ros2) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[4.388345] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:123:52:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)> >::emplace<rclcpp::AnyServiceCallback<std_srvs::srv::Empty>::SharedPtrCallback>(void (DeckLinkCameraDriver::*&)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >))\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.388636] (hi_decklink_ros2) StderrLine: {'line': b'  123 |       \x1b[01;31m\x1b[Kcallback_.template emplace<SharedPtrCallback>(callback)\x1b[m\x1b[K;\n'}
[4.388783] (hi_decklink_ros2) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\x1b[m\x1b[K\n'}
[4.388941] (hi_decklink_ros2) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/client.hpp:29\x1b[m\x1b[K:\n'}
[4.389107] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1519:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp, class ... _Args> std::enable_if_t<(is_constructible_v<_Tp, _Args ...> && __exactly_once<_Tp>), _Tp&> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with _Args = _Tp; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.389449] (hi_decklink_ros2) StderrLine: {'line': b' 1519 |         \x1b[01;36m\x1b[Kemplace\x1b[m\x1b[K(_Args&&... __args)\n'}
[4.389739] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[4.389986] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1519:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.390153] (hi_decklink_ros2) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/13/bits/stl_pair.h:60\x1b[m\x1b[K,\n'}
[4.390279] (hi_decklink_ros2) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/13/bits/stl_algobase.h:64\x1b[m\x1b[K,\n'}
[4.390408] (hi_decklink_ros2) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/13/algorithm:60\x1b[m\x1b[K,\n'}
[4.390538] (hi_decklink_ros2) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/jazzy/include/sensor_msgs/sensor_msgs/msg/detail/image__struct.hpp:11\x1b[m\x1b[K:\n'}
[4.390663] (hi_decklink_ros2) StderrLine: {'line': b'/usr/include/c++/13/type_traits: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<bool _Cond, class _Tp> using std::enable_if_t = typename std::enable_if::type \x1b[35m\x1b[K[with bool _Cond = false; _Tp = std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>&]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.390796] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1519:2:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp, class ... _Args> std::enable_if_t<(is_constructible_v<_Tp, _Args ...> && __exactly_once<_Tp>), _Tp&> std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)> >::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with _Tp = std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>; _Args = {void (DeckLinkCameraDriver::*&)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.390960] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:123:52:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::\x1b[01;32m\x1b[Kset\x1b[m\x1b[K(CallbackT&&) \x1b[35m\x1b[K[with CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename std::enable_if<rclcpp::detail::can_be_nullptr<CallbackT>::value, int>::type <anonymous> = 0; ServiceT = std_srvs::srv::Empty]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.391168] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.391422] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.391773] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.392072] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:35:63:\x1b[m\x1b[K   required from here\n'}
[4.392217] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/type_traits:2610:11:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.392362] (hi_decklink_ros2) StderrLine: {'line': b' 2610 |     using \x1b[01;31m\x1b[Kenable_if_t\x1b[m\x1b[K = typename enable_if<_Cond, _Tp>::type;\n'}
[4.392492] (hi_decklink_ros2) StderrLine: {'line': b'      |           \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.392620] (hi_decklink_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::\x1b[01;32m\x1b[Kset\x1b[m\x1b[K(CallbackT&&) \x1b[35m\x1b[K[with CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename std::enable_if<rclcpp::detail::can_be_nullptr<CallbackT>::value, int>::type <anonymous> = 0; ServiceT = std_srvs::srv::Empty]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.392757] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.392908] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.393066] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.393208] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:35:63:\x1b[m\x1b[K   required from here\n'}
[4.393474] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1530:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp, class _Up, class ... _Args> std::enable_if_t<(is_constructible_v<_Tp, std::initializer_list<_Up>&, _Args ...> && __exactly_once<_Tp>), _Tp&> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(std::initializer_list<_Up>, _Args&& ...) \x1b[35m\x1b[K[with _Up = _Tp; _Args = _Up; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.393651] (hi_decklink_ros2) StderrLine: {'line': b' 1530 |         \x1b[01;36m\x1b[Kemplace\x1b[m\x1b[K(initializer_list<_Up> __il, _Args&&... __args)\n'}
[4.393915] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[4.394270] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1530:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.394398] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:123:52:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  mismatched types \xe2\x80\x98\x1b[01m\x1b[Kstd::initializer_list<_Value>\x1b[m\x1b[K\xe2\x80\x99 and \xe2\x80\x98\x1b[01m\x1b[Kvoid (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.394530] (hi_decklink_ros2) StderrLine: {'line': b'  123 |       \x1b[01;36m\x1b[Kcallback_.template emplace<SharedPtrCallback>(callback)\x1b[m\x1b[K;\n'}
[4.394656] (hi_decklink_ros2) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\x1b[m\x1b[K\n'}
[4.394781] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1540:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<long unsigned int _Np, class ... _Args> std::enable_if_t<is_constructible_v<std::variant<_Types>::__to_type<_Np, typename std::enable_if<(_Np < sizeof... (_Types)), void>::type>, _Args ...>, std::variant<_Types>::__to_type<_Np>&> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with long unsigned int _Np = _Np; _Args = {_Args ...}; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.394942] (hi_decklink_ros2) StderrLine: {'line': b' 1540 |         \x1b[01;36m\x1b[Kemplace\x1b[m\x1b[K(_Args&&... __args)\n'}
[4.395071] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[4.395205] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1540:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.395330] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:123:52:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktype/value mismatch at argument 1 in template parameter list for \xe2\x80\x98\x1b[01m\x1b[Ktemplate<long unsigned int _Np, class ... _Args> std::enable_if_t<is_constructible_v<std::variant<_Types>::__to_type<_Np, typename std::enable_if<(_Np < sizeof... (_Types)), void>::type>, _Args ...>, std::variant<_Types>::__to_type<_Np>&> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with long unsigned int _Np = _Np; _Args = {_Args ...}; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.395482] (hi_decklink_ros2) StderrLine: {'line': b'  123 |       \x1b[01;31m\x1b[Kcallback_.template emplace<SharedPtrCallback>(callback)\x1b[m\x1b[K;\n'}
[4.395610] (hi_decklink_ros2) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\x1b[m\x1b[K\n'}
[4.395735] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:123:52:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  expected a constant of type \xe2\x80\x98\x1b[01m\x1b[Klong unsigned int\x1b[m\x1b[K\xe2\x80\x99, got \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnyServiceCallback<std_srvs::srv::Empty>::SharedPtrCallback\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99}\n'}
[4.395867] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1580:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<long unsigned int _Np, class _Up, class ... _Args> std::enable_if_t<is_constructible_v<std::variant<_Types>::__to_type<_Np, typename std::enable_if<(_Np < sizeof... (_Types)), void>::type>, std::initializer_list<_Up>&, _Args ...>, std::variant<_Types>::__to_type<_Np>&> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(std::initializer_list<_Up>, _Args&& ...) \x1b[35m\x1b[K[with long unsigned int _Np = _Np; _Args = _Up; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.396009] (hi_decklink_ros2) StderrLine: {'line': b' 1580 |         \x1b[01;36m\x1b[Kemplace\x1b[m\x1b[K(initializer_list<_Up> __il, _Args&&... __args)\n'}
[4.396135] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[4.396263] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1580:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.396387] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:123:52:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktype/value mismatch at argument 1 in template parameter list for \xe2\x80\x98\x1b[01m\x1b[Ktemplate<long unsigned int _Np, class _Up, class ... _Args> std::enable_if_t<is_constructible_v<std::variant<_Types>::__to_type<_Np, typename std::enable_if<(_Np < sizeof... (_Types)), void>::type>, std::initializer_list<_Up>&, _Args ...>, std::variant<_Types>::__to_type<_Np>&> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(std::initializer_list<_Up>, _Args&& ...) \x1b[35m\x1b[K[with long unsigned int _Np = _Np; _Args = _Up; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.396557] (hi_decklink_ros2) StderrLine: {'line': b'  123 |       \x1b[01;31m\x1b[Kcallback_.template emplace<SharedPtrCallback>(callback)\x1b[m\x1b[K;\n'}
[4.396687] (hi_decklink_ros2) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\x1b[m\x1b[K\n'}
[4.396817] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:123:52:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  expected a constant of type \xe2\x80\x98\x1b[01m\x1b[Klong unsigned int\x1b[m\x1b[K\xe2\x80\x99, got \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnyServiceCallback<std_srvs::srv::Empty>::SharedPtrCallback\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99}\n'}
[4.396953] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1613:49:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<long unsigned int _Np, class ... _Args> std::enable_if_t<(!(_Np < sizeof... (_Types)))> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with long unsigned int _Np = _Np; _Args = {_Args ...}; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99 (deleted)\n'}
[4.397097] (hi_decklink_ros2) StderrLine: {'line': b' 1613 |         enable_if_t<!(_Np < sizeof...(_Types))> \x1b[01;36m\x1b[Kemplace\x1b[m\x1b[K(_Args&&...) = delete;\n'}
[4.397234] (hi_decklink_ros2) StderrLine: {'line': b'      |                                                 \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[4.397370] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1613:49:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.397500] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:123:52:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktype/value mismatch at argument 1 in template parameter list for \xe2\x80\x98\x1b[01m\x1b[Ktemplate<long unsigned int _Np, class ... _Args> std::enable_if_t<(!(_Np < sizeof... (_Types)))> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with long unsigned int _Np = _Np; _Args = {_Args ...}; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.397655] (hi_decklink_ros2) StderrLine: {'line': b'  123 |       \x1b[01;31m\x1b[Kcallback_.template emplace<SharedPtrCallback>(callback)\x1b[m\x1b[K;\n'}
[4.397775] (hi_decklink_ros2) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\x1b[m\x1b[K\n'}
[4.397906] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:123:52:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  expected a constant of type \xe2\x80\x98\x1b[01m\x1b[Klong unsigned int\x1b[m\x1b[K\xe2\x80\x99, got \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnyServiceCallback<std_srvs::srv::Empty>::SharedPtrCallback\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99}\n'}
[4.398037] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1616:43:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp, class ... _Args> std::enable_if_t<(! __exactly_once<_Tp>)> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with _Args = _Tp; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99 (deleted)\n'}
[4.398232] (hi_decklink_ros2) StderrLine: {'line': b' 1616 |         enable_if_t<!__exactly_once<_Tp>> \x1b[01;36m\x1b[Kemplace\x1b[m\x1b[K(_Args&&...) = delete;\n'}
[4.398385] (hi_decklink_ros2) StderrLine: {'line': b'      |                                           \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[4.398503] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1616:43:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.398601] (hi_decklink_ros2) StderrLine: {'line': b'/usr/include/c++/13/type_traits: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<bool _Cond, class _Tp> using std::enable_if_t = typename std::enable_if::type \x1b[35m\x1b[K[with bool _Cond = false; _Tp = void]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.398700] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1616:36:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp, class ... _Args> std::enable_if_t<(! __exactly_once<_Tp>), void> std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)> >::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with _Tp = std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>; _Args = <missing>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.398829] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:123:52:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::\x1b[01;32m\x1b[Kset\x1b[m\x1b[K(CallbackT&&) \x1b[35m\x1b[K[with CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename std::enable_if<rclcpp::detail::can_be_nullptr<CallbackT>::value, int>::type <anonymous> = 0; ServiceT = std_srvs::srv::Empty]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.398944] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.399084] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.399235] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.399376] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:35:63:\x1b[m\x1b[K   required from here\n'}
[4.399503] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/type_traits:2610:11:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, void>\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.399649] (hi_decklink_ros2) StderrLine: {'line': b' 2610 |     using \x1b[01;31m\x1b[Kenable_if_t\x1b[m\x1b[K = typename enable_if<_Cond, _Tp>::type;\n'}
[4.399770] (hi_decklink_ros2) StderrLine: {'line': b'      |           \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.399889] (hi_decklink_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::\x1b[01;32m\x1b[Kset\x1b[m\x1b[K(CallbackT&&) \x1b[35m\x1b[K[with CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename std::enable_if<rclcpp::detail::can_be_nullptr<CallbackT>::value, int>::type <anonymous> = 0; ServiceT = std_srvs::srv::Empty]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.400022] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.400193] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.400325] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.400459] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:35:63:\x1b[m\x1b[K   required from here\n'}
[4.400583] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:128:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvalue\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::function_traits::same_arguments<void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >), std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.400745] (hi_decklink_ros2) StderrLine: {'line': b'  128 |       >::\x1b[01;31m\x1b[Kvalue\x1b[m\x1b[K)\n'}
[4.400869] (hi_decklink_ros2) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[4.400987] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:130:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)> >::emplace<rclcpp::AnyServiceCallback<std_srvs::srv::Empty>::SharedPtrWithRequestHeaderCallback>(void (DeckLinkCameraDriver::*&)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >))\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.401166] (hi_decklink_ros2) StderrLine: {'line': b'  130 |       \x1b[01;31m\x1b[Kcallback_.template emplace<SharedPtrWithRequestHeaderCallback>(callback)\x1b[m\x1b[K;\n'}
[4.401303] (hi_decklink_ros2) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\x1b[m\x1b[K\n'}
[4.401423] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1519:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp, class ... _Args> std::enable_if_t<(is_constructible_v<_Tp, _Args ...> && __exactly_once<_Tp>), _Tp&> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with _Args = _Tp; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.401574] (hi_decklink_ros2) StderrLine: {'line': b' 1519 |         \x1b[01;36m\x1b[Kemplace\x1b[m\x1b[K(_Args&&... __args)\n'}
[4.401696] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[4.401822] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1519:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.401973] (hi_decklink_ros2) StderrLine: {'line': b'/usr/include/c++/13/type_traits: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<bool _Cond, class _Tp> using std::enable_if_t = typename std::enable_if::type \x1b[35m\x1b[K[with bool _Cond = false; _Tp = std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>&]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.402129] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1519:2:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp, class ... _Args> std::enable_if_t<(is_constructible_v<_Tp, _Args ...> && __exactly_once<_Tp>), _Tp&> std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)> >::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with _Tp = std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>; _Args = {void (DeckLinkCameraDriver::*&)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.402280] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:130:69:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::\x1b[01;32m\x1b[Kset\x1b[m\x1b[K(CallbackT&&) \x1b[35m\x1b[K[with CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename std::enable_if<rclcpp::detail::can_be_nullptr<CallbackT>::value, int>::type <anonymous> = 0; ServiceT = std_srvs::srv::Empty]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.402418] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.402568] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.402719] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.402861] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:35:63:\x1b[m\x1b[K   required from here\n'}
[4.402988] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/type_traits:2610:11:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.403120] (hi_decklink_ros2) StderrLine: {'line': b' 2610 |     using \x1b[01;31m\x1b[Kenable_if_t\x1b[m\x1b[K = typename enable_if<_Cond, _Tp>::type;\n'}
[4.403498] (hi_decklink_ros2) StderrLine: {'line': b'      |           \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.403626] (hi_decklink_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::\x1b[01;32m\x1b[Kset\x1b[m\x1b[K(CallbackT&&) \x1b[35m\x1b[K[with CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename std::enable_if<rclcpp::detail::can_be_nullptr<CallbackT>::value, int>::type <anonymous> = 0; ServiceT = std_srvs::srv::Empty]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.403763] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.403921] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.404098] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.404238] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:35:63:\x1b[m\x1b[K   required from here\n'}
[4.404370] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1530:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp, class _Up, class ... _Args> std::enable_if_t<(is_constructible_v<_Tp, std::initializer_list<_Up>&, _Args ...> && __exactly_once<_Tp>), _Tp&> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(std::initializer_list<_Up>, _Args&& ...) \x1b[35m\x1b[K[with _Up = _Tp; _Args = _Up; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.404533] (hi_decklink_ros2) StderrLine: {'line': b' 1530 |         \x1b[01;36m\x1b[Kemplace\x1b[m\x1b[K(initializer_list<_Up> __il, _Args&&... __args)\n'}
[4.404666] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[4.404787] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1530:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.404913] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:130:69:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  mismatched types \xe2\x80\x98\x1b[01m\x1b[Kstd::initializer_list<_Value>\x1b[m\x1b[K\xe2\x80\x99 and \xe2\x80\x98\x1b[01m\x1b[Kvoid (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.405059] (hi_decklink_ros2) StderrLine: {'line': b'  130 |       \x1b[01;36m\x1b[Kcallback_.template emplace<SharedPtrWithRequestHeaderCallback>(callback)\x1b[m\x1b[K;\n'}
[4.405214] (hi_decklink_ros2) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\x1b[m\x1b[K\n'}
[4.405347] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1540:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<long unsigned int _Np, class ... _Args> std::enable_if_t<is_constructible_v<std::variant<_Types>::__to_type<_Np, typename std::enable_if<(_Np < sizeof... (_Types)), void>::type>, _Args ...>, std::variant<_Types>::__to_type<_Np>&> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with long unsigned int _Np = _Np; _Args = {_Args ...}; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.405494] (hi_decklink_ros2) StderrLine: {'line': b' 1540 |         \x1b[01;36m\x1b[Kemplace\x1b[m\x1b[K(_Args&&... __args)\n'}
[4.405621] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[4.405758] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1540:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.405888] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:130:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktype/value mismatch at argument 1 in template parameter list for \xe2\x80\x98\x1b[01m\x1b[Ktemplate<long unsigned int _Np, class ... _Args> std::enable_if_t<is_constructible_v<std::variant<_Types>::__to_type<_Np, typename std::enable_if<(_Np < sizeof... (_Types)), void>::type>, _Args ...>, std::variant<_Types>::__to_type<_Np>&> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with long unsigned int _Np = _Np; _Args = {_Args ...}; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.406046] (hi_decklink_ros2) StderrLine: {'line': b'  130 |       \x1b[01;31m\x1b[Kcallback_.template emplace<SharedPtrWithRequestHeaderCallback>(callback)\x1b[m\x1b[K;\n'}
[4.406170] (hi_decklink_ros2) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\x1b[m\x1b[K\n'}
[4.406295] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:130:69:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  expected a constant of type \xe2\x80\x98\x1b[01m\x1b[Klong unsigned int\x1b[m\x1b[K\xe2\x80\x99, got \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnyServiceCallback<std_srvs::srv::Empty>::SharedPtrWithRequestHeaderCallback\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99}\n'}
[4.406439] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1580:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<long unsigned int _Np, class _Up, class ... _Args> std::enable_if_t<is_constructible_v<std::variant<_Types>::__to_type<_Np, typename std::enable_if<(_Np < sizeof... (_Types)), void>::type>, std::initializer_list<_Up>&, _Args ...>, std::variant<_Types>::__to_type<_Np>&> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(std::initializer_list<_Up>, _Args&& ...) \x1b[35m\x1b[K[with long unsigned int _Np = _Np; _Args = _Up; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.406574] (hi_decklink_ros2) StderrLine: {'line': b' 1580 |         \x1b[01;36m\x1b[Kemplace\x1b[m\x1b[K(initializer_list<_Up> __il, _Args&&... __args)\n'}
[4.406695] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[4.406821] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1580:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.406949] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:130:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktype/value mismatch at argument 1 in template parameter list for \xe2\x80\x98\x1b[01m\x1b[Ktemplate<long unsigned int _Np, class _Up, class ... _Args> std::enable_if_t<is_constructible_v<std::variant<_Types>::__to_type<_Np, typename std::enable_if<(_Np < sizeof... (_Types)), void>::type>, std::initializer_list<_Up>&, _Args ...>, std::variant<_Types>::__to_type<_Np>&> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(std::initializer_list<_Up>, _Args&& ...) \x1b[35m\x1b[K[with long unsigned int _Np = _Np; _Args = _Up; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.407118] (hi_decklink_ros2) StderrLine: {'line': b'  130 |       \x1b[01;31m\x1b[Kcallback_.template emplace<SharedPtrWithRequestHeaderCallback>(callback)\x1b[m\x1b[K;\n'}
[4.407245] (hi_decklink_ros2) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\x1b[m\x1b[K\n'}
[4.407376] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:130:69:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  expected a constant of type \xe2\x80\x98\x1b[01m\x1b[Klong unsigned int\x1b[m\x1b[K\xe2\x80\x99, got \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnyServiceCallback<std_srvs::srv::Empty>::SharedPtrWithRequestHeaderCallback\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99}\n'}
[4.407503] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1613:49:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<long unsigned int _Np, class ... _Args> std::enable_if_t<(!(_Np < sizeof... (_Types)))> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with long unsigned int _Np = _Np; _Args = {_Args ...}; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99 (deleted)\n'}
[4.407643] (hi_decklink_ros2) StderrLine: {'line': b' 1613 |         enable_if_t<!(_Np < sizeof...(_Types))> \x1b[01;36m\x1b[Kemplace\x1b[m\x1b[K(_Args&&...) = delete;\n'}
[4.407771] (hi_decklink_ros2) StderrLine: {'line': b'      |                                                 \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[4.407917] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1613:49:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.408047] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:130:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktype/value mismatch at argument 1 in template parameter list for \xe2\x80\x98\x1b[01m\x1b[Ktemplate<long unsigned int _Np, class ... _Args> std::enable_if_t<(!(_Np < sizeof... (_Types)))> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with long unsigned int _Np = _Np; _Args = {_Args ...}; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.408202] (hi_decklink_ros2) StderrLine: {'line': b'  130 |       \x1b[01;31m\x1b[Kcallback_.template emplace<SharedPtrWithRequestHeaderCallback>(callback)\x1b[m\x1b[K;\n'}
[4.408338] (hi_decklink_ros2) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\x1b[m\x1b[K\n'}
[4.408463] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:130:69:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  expected a constant of type \xe2\x80\x98\x1b[01m\x1b[Klong unsigned int\x1b[m\x1b[K\xe2\x80\x99, got \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnyServiceCallback<std_srvs::srv::Empty>::SharedPtrWithRequestHeaderCallback\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99}\n'}
[4.408612] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1616:43:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp, class ... _Args> std::enable_if_t<(! __exactly_once<_Tp>)> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with _Args = _Tp; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99 (deleted)\n'}
[4.408755] (hi_decklink_ros2) StderrLine: {'line': b' 1616 |         enable_if_t<!__exactly_once<_Tp>> \x1b[01;36m\x1b[Kemplace\x1b[m\x1b[K(_Args&&...) = delete;\n'}
[4.408878] (hi_decklink_ros2) StderrLine: {'line': b'      |                                           \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[4.409003] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1616:43:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.409133] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:135:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvalue\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::function_traits::same_arguments<void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >), std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.409272] (hi_decklink_ros2) StderrLine: {'line': b'  135 |       >::\x1b[01;31m\x1b[Kvalue\x1b[m\x1b[K)\n'}
[4.409415] (hi_decklink_ros2) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[4.409539] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:137:65:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)> >::emplace<rclcpp::AnyServiceCallback<std_srvs::srv::Empty>::SharedPtrDeferResponseCallback>(void (DeckLinkCameraDriver::*&)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >))\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.409687] (hi_decklink_ros2) StderrLine: {'line': b'  137 |       \x1b[01;31m\x1b[Kcallback_.template emplace<SharedPtrDeferResponseCallback>(callback)\x1b[m\x1b[K;\n'}
[4.409815] (hi_decklink_ros2) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\x1b[m\x1b[K\n'}
[4.409938] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1519:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp, class ... _Args> std::enable_if_t<(is_constructible_v<_Tp, _Args ...> && __exactly_once<_Tp>), _Tp&> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with _Args = _Tp; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.410086] (hi_decklink_ros2) StderrLine: {'line': b' 1519 |         \x1b[01;36m\x1b[Kemplace\x1b[m\x1b[K(_Args&&... __args)\n'}
[4.410243] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[4.410368] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1519:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.410496] (hi_decklink_ros2) StderrLine: {'line': b'/usr/include/c++/13/type_traits: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<bool _Cond, class _Tp> using std::enable_if_t = typename std::enable_if::type \x1b[35m\x1b[K[with bool _Cond = false; _Tp = std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>&]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.410624] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1519:2:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp, class ... _Args> std::enable_if_t<(is_constructible_v<_Tp, _Args ...> && __exactly_once<_Tp>), _Tp&> std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)> >::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with _Tp = std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>; _Args = {void (DeckLinkCameraDriver::*&)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.410765] (-) TimerEvent: {}
[4.410891] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:137:65:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::\x1b[01;32m\x1b[Kset\x1b[m\x1b[K(CallbackT&&) \x1b[35m\x1b[K[with CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename std::enable_if<rclcpp::detail::can_be_nullptr<CallbackT>::value, int>::type <anonymous> = 0; ServiceT = std_srvs::srv::Empty]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.411048] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.411237] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.411379] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.411515] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:35:63:\x1b[m\x1b[K   required from here\n'}
[4.411639] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/type_traits:2610:11:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.411769] (hi_decklink_ros2) StderrLine: {'line': b' 2610 |     using \x1b[01;31m\x1b[Kenable_if_t\x1b[m\x1b[K = typename enable_if<_Cond, _Tp>::type;\n'}
[4.411893] (hi_decklink_ros2) StderrLine: {'line': b'      |           \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.412016] (hi_decklink_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::\x1b[01;32m\x1b[Kset\x1b[m\x1b[K(CallbackT&&) \x1b[35m\x1b[K[with CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename std::enable_if<rclcpp::detail::can_be_nullptr<CallbackT>::value, int>::type <anonymous> = 0; ServiceT = std_srvs::srv::Empty]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.412152] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.412289] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.412435] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.412582] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:35:63:\x1b[m\x1b[K   required from here\n'}
[4.412711] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1530:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp, class _Up, class ... _Args> std::enable_if_t<(is_constructible_v<_Tp, std::initializer_list<_Up>&, _Args ...> && __exactly_once<_Tp>), _Tp&> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(std::initializer_list<_Up>, _Args&& ...) \x1b[35m\x1b[K[with _Up = _Tp; _Args = _Up; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.412873] (hi_decklink_ros2) StderrLine: {'line': b' 1530 |         \x1b[01;36m\x1b[Kemplace\x1b[m\x1b[K(initializer_list<_Up> __il, _Args&&... __args)\n'}
[4.412995] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[4.413173] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1530:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.413342] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:137:65:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  mismatched types \xe2\x80\x98\x1b[01m\x1b[Kstd::initializer_list<_Value>\x1b[m\x1b[K\xe2\x80\x99 and \xe2\x80\x98\x1b[01m\x1b[Kvoid (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.413501] (hi_decklink_ros2) StderrLine: {'line': b'  137 |       \x1b[01;36m\x1b[Kcallback_.template emplace<SharedPtrDeferResponseCallback>(callback)\x1b[m\x1b[K;\n'}
[4.413624] (hi_decklink_ros2) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\x1b[m\x1b[K\n'}
[4.413761] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1540:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<long unsigned int _Np, class ... _Args> std::enable_if_t<is_constructible_v<std::variant<_Types>::__to_type<_Np, typename std::enable_if<(_Np < sizeof... (_Types)), void>::type>, _Args ...>, std::variant<_Types>::__to_type<_Np>&> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with long unsigned int _Np = _Np; _Args = {_Args ...}; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.413911] (hi_decklink_ros2) StderrLine: {'line': b' 1540 |         \x1b[01;36m\x1b[Kemplace\x1b[m\x1b[K(_Args&&... __args)\n'}
[4.414045] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[4.414213] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1540:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.414348] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:137:65:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktype/value mismatch at argument 1 in template parameter list for \xe2\x80\x98\x1b[01m\x1b[Ktemplate<long unsigned int _Np, class ... _Args> std::enable_if_t<is_constructible_v<std::variant<_Types>::__to_type<_Np, typename std::enable_if<(_Np < sizeof... (_Types)), void>::type>, _Args ...>, std::variant<_Types>::__to_type<_Np>&> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with long unsigned int _Np = _Np; _Args = {_Args ...}; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.414482] (hi_decklink_ros2) StderrLine: {'line': b'  137 |       \x1b[01;31m\x1b[Kcallback_.template emplace<SharedPtrDeferResponseCallback>(callback)\x1b[m\x1b[K;\n'}
[4.414605] (hi_decklink_ros2) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\x1b[m\x1b[K\n'}
[4.414731] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:137:65:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  expected a constant of type \xe2\x80\x98\x1b[01m\x1b[Klong unsigned int\x1b[m\x1b[K\xe2\x80\x99, got \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnyServiceCallback<std_srvs::srv::Empty>::SharedPtrDeferResponseCallback\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99}\n'}
[4.414861] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1580:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<long unsigned int _Np, class _Up, class ... _Args> std::enable_if_t<is_constructible_v<std::variant<_Types>::__to_type<_Np, typename std::enable_if<(_Np < sizeof... (_Types)), void>::type>, std::initializer_list<_Up>&, _Args ...>, std::variant<_Types>::__to_type<_Np>&> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(std::initializer_list<_Up>, _Args&& ...) \x1b[35m\x1b[K[with long unsigned int _Np = _Np; _Args = _Up; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.415022] (hi_decklink_ros2) StderrLine: {'line': b' 1580 |         \x1b[01;36m\x1b[Kemplace\x1b[m\x1b[K(initializer_list<_Up> __il, _Args&&... __args)\n'}
[4.415173] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[4.415317] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1580:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.415440] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:137:65:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktype/value mismatch at argument 1 in template parameter list for \xe2\x80\x98\x1b[01m\x1b[Ktemplate<long unsigned int _Np, class _Up, class ... _Args> std::enable_if_t<is_constructible_v<std::variant<_Types>::__to_type<_Np, typename std::enable_if<(_Np < sizeof... (_Types)), void>::type>, std::initializer_list<_Up>&, _Args ...>, std::variant<_Types>::__to_type<_Np>&> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(std::initializer_list<_Up>, _Args&& ...) \x1b[35m\x1b[K[with long unsigned int _Np = _Np; _Args = _Up; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.415600] (hi_decklink_ros2) StderrLine: {'line': b'  137 |       \x1b[01;31m\x1b[Kcallback_.template emplace<SharedPtrDeferResponseCallback>(callback)\x1b[m\x1b[K;\n'}
[4.415727] (hi_decklink_ros2) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\x1b[m\x1b[K\n'}
[4.415850] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:137:65:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  expected a constant of type \xe2\x80\x98\x1b[01m\x1b[Klong unsigned int\x1b[m\x1b[K\xe2\x80\x99, got \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnyServiceCallback<std_srvs::srv::Empty>::SharedPtrDeferResponseCallback\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99}\n'}
[4.415978] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1613:49:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<long unsigned int _Np, class ... _Args> std::enable_if_t<(!(_Np < sizeof... (_Types)))> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with long unsigned int _Np = _Np; _Args = {_Args ...}; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99 (deleted)\n'}
[4.416114] (hi_decklink_ros2) StderrLine: {'line': b' 1613 |         enable_if_t<!(_Np < sizeof...(_Types))> \x1b[01;36m\x1b[Kemplace\x1b[m\x1b[K(_Args&&...) = delete;\n'}
[4.416273] (hi_decklink_ros2) StderrLine: {'line': b'      |                                                 \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[4.416405] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1613:49:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.416526] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:137:65:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktype/value mismatch at argument 1 in template parameter list for \xe2\x80\x98\x1b[01m\x1b[Ktemplate<long unsigned int _Np, class ... _Args> std::enable_if_t<(!(_Np < sizeof... (_Types)))> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with long unsigned int _Np = _Np; _Args = {_Args ...}; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.416671] (hi_decklink_ros2) StderrLine: {'line': b'  137 |       \x1b[01;31m\x1b[Kcallback_.template emplace<SharedPtrDeferResponseCallback>(callback)\x1b[m\x1b[K;\n'}
[4.416803] (hi_decklink_ros2) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\x1b[m\x1b[K\n'}
[4.416928] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:137:65:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  expected a constant of type \xe2\x80\x98\x1b[01m\x1b[Klong unsigned int\x1b[m\x1b[K\xe2\x80\x99, got \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnyServiceCallback<std_srvs::srv::Empty>::SharedPtrDeferResponseCallback\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99}\n'}
[4.417061] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1616:43:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp, class ... _Args> std::enable_if_t<(! __exactly_once<_Tp>)> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with _Args = _Tp; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99 (deleted)\n'}
[4.417233] (hi_decklink_ros2) StderrLine: {'line': b' 1616 |         enable_if_t<!__exactly_once<_Tp>> \x1b[01;36m\x1b[Kemplace\x1b[m\x1b[K(_Args&&...) = delete;\n'}
[4.417356] (hi_decklink_ros2) StderrLine: {'line': b'      |                                           \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[4.417464] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1616:43:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.417570] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:142:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvalue\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::function_traits::same_arguments<void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >), std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.417681] (hi_decklink_ros2) StderrLine: {'line': b'  142 |       >::\x1b[01;31m\x1b[Kvalue\x1b[m\x1b[K)\n'}
[4.417818] (hi_decklink_ros2) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[4.417955] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:144:82:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)> >::emplace<rclcpp::AnyServiceCallback<std_srvs::srv::Empty>::SharedPtrDeferResponseCallbackWithServiceHandle>(void (DeckLinkCameraDriver::*&)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >))\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.418106] (hi_decklink_ros2) StderrLine: {'line': b'  144 |       \x1b[01;31m\x1b[Kcallback_.template emplace<SharedPtrDeferResponseCallbackWithServiceHandle>(callback)\x1b[m\x1b[K;\n'}
[4.418254] (hi_decklink_ros2) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\x1b[m\x1b[K\n'}
[4.418382] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1519:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp, class ... _Args> std::enable_if_t<(is_constructible_v<_Tp, _Args ...> && __exactly_once<_Tp>), _Tp&> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with _Args = _Tp; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.418538] (hi_decklink_ros2) StderrLine: {'line': b' 1519 |         \x1b[01;36m\x1b[Kemplace\x1b[m\x1b[K(_Args&&... __args)\n'}
[4.418664] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[4.418800] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1519:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.418929] (hi_decklink_ros2) StderrLine: {'line': b'/usr/include/c++/13/type_traits: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<bool _Cond, class _Tp> using std::enable_if_t = typename std::enable_if::type \x1b[35m\x1b[K[with bool _Cond = false; _Tp = std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>&]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.419054] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1519:2:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp, class ... _Args> std::enable_if_t<(is_constructible_v<_Tp, _Args ...> && __exactly_once<_Tp>), _Tp&> std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)> >::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with _Tp = std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>; _Args = {void (DeckLinkCameraDriver::*&)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.419217] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:144:82:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::\x1b[01;32m\x1b[Kset\x1b[m\x1b[K(CallbackT&&) \x1b[35m\x1b[K[with CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename std::enable_if<rclcpp::detail::can_be_nullptr<CallbackT>::value, int>::type <anonymous> = 0; ServiceT = std_srvs::srv::Empty]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.419349] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.419509] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.419653] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.419779] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:35:63:\x1b[m\x1b[K   required from here\n'}
[4.419909] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/type_traits:2610:11:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.420035] (hi_decklink_ros2) StderrLine: {'line': b' 2610 |     using \x1b[01;31m\x1b[Kenable_if_t\x1b[m\x1b[K = typename enable_if<_Cond, _Tp>::type;\n'}
[4.420180] (hi_decklink_ros2) StderrLine: {'line': b'      |           \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.420298] (hi_decklink_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::\x1b[01;32m\x1b[Kset\x1b[m\x1b[K(CallbackT&&) \x1b[35m\x1b[K[with CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename std::enable_if<rclcpp::detail::can_be_nullptr<CallbackT>::value, int>::type <anonymous> = 0; ServiceT = std_srvs::srv::Empty]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.420431] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.420581] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.420776] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.420909] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:35:63:\x1b[m\x1b[K   required from here\n'}
[4.421037] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1530:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp, class _Up, class ... _Args> std::enable_if_t<(is_constructible_v<_Tp, std::initializer_list<_Up>&, _Args ...> && __exactly_once<_Tp>), _Tp&> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(std::initializer_list<_Up>, _Args&& ...) \x1b[35m\x1b[K[with _Up = _Tp; _Args = _Up; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.421229] (hi_decklink_ros2) StderrLine: {'line': b' 1530 |         \x1b[01;36m\x1b[Kemplace\x1b[m\x1b[K(initializer_list<_Up> __il, _Args&&... __args)\n'}
[4.421372] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[4.421499] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1530:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.421627] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:144:82:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  mismatched types \xe2\x80\x98\x1b[01m\x1b[Kstd::initializer_list<_Value>\x1b[m\x1b[K\xe2\x80\x99 and \xe2\x80\x98\x1b[01m\x1b[Kvoid (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.421760] (hi_decklink_ros2) StderrLine: {'line': b'  144 |       \x1b[01;36m\x1b[Kcallback_.template emplace<SharedPtrDeferResponseCallbackWithServiceHandle>(callback)\x1b[m\x1b[K;\n'}
[4.421884] (hi_decklink_ros2) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\x1b[m\x1b[K\n'}
[4.421991] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1540:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<long unsigned int _Np, class ... _Args> std::enable_if_t<is_constructible_v<std::variant<_Types>::__to_type<_Np, typename std::enable_if<(_Np < sizeof... (_Types)), void>::type>, _Args ...>, std::variant<_Types>::__to_type<_Np>&> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with long unsigned int _Np = _Np; _Args = {_Args ...}; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.422163] (hi_decklink_ros2) StderrLine: {'line': b' 1540 |         \x1b[01;36m\x1b[Kemplace\x1b[m\x1b[K(_Args&&... __args)\n'}
[4.422285] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[4.422409] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1540:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.422558] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:144:82:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktype/value mismatch at argument 1 in template parameter list for \xe2\x80\x98\x1b[01m\x1b[Ktemplate<long unsigned int _Np, class ... _Args> std::enable_if_t<is_constructible_v<std::variant<_Types>::__to_type<_Np, typename std::enable_if<(_Np < sizeof... (_Types)), void>::type>, _Args ...>, std::variant<_Types>::__to_type<_Np>&> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with long unsigned int _Np = _Np; _Args = {_Args ...}; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.422701] (hi_decklink_ros2) StderrLine: {'line': b'  144 |       \x1b[01;31m\x1b[Kcallback_.template emplace<SharedPtrDeferResponseCallbackWithServiceHandle>(callback)\x1b[m\x1b[K;\n'}
[4.422828] (hi_decklink_ros2) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\x1b[m\x1b[K\n'}
[4.422953] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:144:82:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  expected a constant of type \xe2\x80\x98\x1b[01m\x1b[Klong unsigned int\x1b[m\x1b[K\xe2\x80\x99, got \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnyServiceCallback<std_srvs::srv::Empty>::SharedPtrDeferResponseCallbackWithServiceHandle\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99}\n'}
[4.423095] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1580:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<long unsigned int _Np, class _Up, class ... _Args> std::enable_if_t<is_constructible_v<std::variant<_Types>::__to_type<_Np, typename std::enable_if<(_Np < sizeof... (_Types)), void>::type>, std::initializer_list<_Up>&, _Args ...>, std::variant<_Types>::__to_type<_Np>&> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(std::initializer_list<_Up>, _Args&& ...) \x1b[35m\x1b[K[with long unsigned int _Np = _Np; _Args = _Up; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.423263] (hi_decklink_ros2) StderrLine: {'line': b' 1580 |         \x1b[01;36m\x1b[Kemplace\x1b[m\x1b[K(initializer_list<_Up> __il, _Args&&... __args)\n'}
[4.423391] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[4.423522] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1580:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.423655] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:144:82:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktype/value mismatch at argument 1 in template parameter list for \xe2\x80\x98\x1b[01m\x1b[Ktemplate<long unsigned int _Np, class _Up, class ... _Args> std::enable_if_t<is_constructible_v<std::variant<_Types>::__to_type<_Np, typename std::enable_if<(_Np < sizeof... (_Types)), void>::type>, std::initializer_list<_Up>&, _Args ...>, std::variant<_Types>::__to_type<_Np>&> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(std::initializer_list<_Up>, _Args&& ...) \x1b[35m\x1b[K[with long unsigned int _Np = _Np; _Args = _Up; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.423821] (hi_decklink_ros2) StderrLine: {'line': b'  144 |       \x1b[01;31m\x1b[Kcallback_.template emplace<SharedPtrDeferResponseCallbackWithServiceHandle>(callback)\x1b[m\x1b[K;\n'}
[4.423951] (hi_decklink_ros2) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\x1b[m\x1b[K\n'}
[4.424084] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:144:82:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  expected a constant of type \xe2\x80\x98\x1b[01m\x1b[Klong unsigned int\x1b[m\x1b[K\xe2\x80\x99, got \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnyServiceCallback<std_srvs::srv::Empty>::SharedPtrDeferResponseCallbackWithServiceHandle\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99}\n'}
[4.424241] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1613:49:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<long unsigned int _Np, class ... _Args> std::enable_if_t<(!(_Np < sizeof... (_Types)))> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with long unsigned int _Np = _Np; _Args = {_Args ...}; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99 (deleted)\n'}
[4.424380] (hi_decklink_ros2) StderrLine: {'line': b' 1613 |         enable_if_t<!(_Np < sizeof...(_Types))> \x1b[01;36m\x1b[Kemplace\x1b[m\x1b[K(_Args&&...) = delete;\n'}
[4.424504] (hi_decklink_ros2) StderrLine: {'line': b'      |                                                 \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[4.424626] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1613:49:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.424751] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:144:82:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktype/value mismatch at argument 1 in template parameter list for \xe2\x80\x98\x1b[01m\x1b[Ktemplate<long unsigned int _Np, class ... _Args> std::enable_if_t<(!(_Np < sizeof... (_Types)))> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with long unsigned int _Np = _Np; _Args = {_Args ...}; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.424900] (hi_decklink_ros2) StderrLine: {'line': b'  144 |       \x1b[01;31m\x1b[Kcallback_.template emplace<SharedPtrDeferResponseCallbackWithServiceHandle>(callback)\x1b[m\x1b[K;\n'}
[4.425041] (hi_decklink_ros2) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\x1b[m\x1b[K\n'}
[4.425189] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:144:82:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  expected a constant of type \xe2\x80\x98\x1b[01m\x1b[Klong unsigned int\x1b[m\x1b[K\xe2\x80\x99, got \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnyServiceCallback<std_srvs::srv::Empty>::SharedPtrDeferResponseCallbackWithServiceHandle\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99}\n'}
[4.425319] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1616:43:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp, class ... _Args> std::enable_if_t<(! __exactly_once<_Tp>)> std::variant<_Types>::\x1b[01;32m\x1b[Kemplace\x1b[m\x1b[K(_Args&& ...) \x1b[35m\x1b[K[with _Args = _Tp; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99 (deleted)\n'}
[4.425458] (hi_decklink_ros2) StderrLine: {'line': b' 1616 |         enable_if_t<!__exactly_once<_Tp>> \x1b[01;36m\x1b[Kemplace\x1b[m\x1b[K(_Args&&...) = delete;\n'}
[4.425585] (hi_decklink_ros2) StderrLine: {'line': b'      |                                           \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[4.425711] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1616:43:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.425839] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:148:17:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)> >\x1b[m\x1b[K\xe2\x80\x99 and \xe2\x80\x98\x1b[01m\x1b[Kvoid (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)\x1b[m\x1b[K\xe2\x80\x99)\n'}
[4.425986] (hi_decklink_ros2) StderrLine: {'line': b'  148 |       \x1b[01;31m\x1b[Kcallback_ = std::forward<CallbackT>(callback)\x1b[m\x1b[K;\n'}
[4.426111] (hi_decklink_ros2) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.426257] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1494:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::\x1b[01;32m\x1b[Koperator=\x1b[m\x1b[K(_Tp&&) \x1b[35m\x1b[K[with _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.426411] (hi_decklink_ros2) StderrLine: {'line': b' 1494 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(_Tp&& __rhs)\n'}
[4.426550] (hi_decklink_ros2) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.426672] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1494:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.426790] (hi_decklink_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ... _Types> template<class _Tp, class> using std::variant<_Types>::__accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > \x1b[35m\x1b[K[with _Tp = void (DeckLinkCameraDriver::*&&)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); <template-parameter-2-2> = void; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.426929] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1490:14:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)> >&> std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)> >::\x1b[01;32m\x1b[Koperator=\x1b[m\x1b[K(_Tp&&) \x1b[35m\x1b[K[with _Tp = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.427176] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:148:17:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::\x1b[01;32m\x1b[Kset\x1b[m\x1b[K(CallbackT&&) \x1b[35m\x1b[K[with CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename std::enable_if<rclcpp::detail::can_be_nullptr<CallbackT>::value, int>::type <anonymous> = 0; ServiceT = std_srvs::srv::Empty]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.427320] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.427474] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.427616] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.427747] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:35:63:\x1b[m\x1b[K   required from here\n'}
[4.427873] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1407:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, void>\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.428001] (hi_decklink_ros2) StderrLine: {'line': b' 1407 |         using \x1b[01;31m\x1b[K__accepted_type\x1b[m\x1b[K = __to_type<__accepted_index<_Tp>>;\n'}
[4.428126] (hi_decklink_ros2) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.428287] (hi_decklink_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::\x1b[01;32m\x1b[Kset\x1b[m\x1b[K(CallbackT&&) \x1b[35m\x1b[K[with CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename std::enable_if<rclcpp::detail::can_be_nullptr<CallbackT>::value, int>::type <anonymous> = 0; ServiceT = std_srvs::srv::Empty]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.428428] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.428564] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.428717] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::\x1b[01;32m\x1b[Kcreate_service\x1b[m\x1b[K(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) \x1b[35m\x1b[K[with ServiceT = std_srvs::srv::Empty; CallbackT = void (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >); typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.428851] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/home/mhenkel/Documents/hi_decklink_ros2/src/decklink_camera_driver.cpp:35:63:\x1b[m\x1b[K   required from here\n'}
[4.428972] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1430:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::\x1b[01;32m\x1b[Koperator=\x1b[m\x1b[K(const std::variant<_Types>&) \x1b[35m\x1b[K[with _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.429171] (hi_decklink_ros2) StderrLine: {'line': b' 1430 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const variant&) = default;\n'}
[4.429328] (hi_decklink_ros2) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.429479] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1430:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kvoid (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kconst std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)> >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.429617] (hi_decklink_ros2) StderrLine: {'line': b' 1430 |       variant& operator=(\x1b[01;36m\x1b[Kconst variant&\x1b[m\x1b[K) = default;\n'}
[4.429743] (hi_decklink_ros2) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.429877] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1431:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::\x1b[01;32m\x1b[Koperator=\x1b[m\x1b[K(std::variant<_Types>&&) \x1b[35m\x1b[K[with _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.430006] (hi_decklink_ros2) StderrLine: {'line': b' 1431 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(variant&&) = default;\n'}
[4.430109] (hi_decklink_ros2) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.430261] (hi_decklink_ros2) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1431:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kvoid (DeckLinkCameraDriver::*)(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Empty_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Empty> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Empty_Request_<std::allocator<void> > >)> >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.430418] (hi_decklink_ros2) StderrLine: {'line': b' 1431 |       variant& operator=(\x1b[01;36m\x1b[Kvariant&&\x1b[m\x1b[K) = default;\n'}
[4.430540] (hi_decklink_ros2) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[4.510876] (-) TimerEvent: {}
[4.611162] (-) TimerEvent: {}
[4.711457] (-) TimerEvent: {}
[4.811734] (-) TimerEvent: {}
[4.912018] (-) TimerEvent: {}
[5.012305] (-) TimerEvent: {}
[5.112570] (-) TimerEvent: {}
[5.145185] (hi_decklink_ros2) StderrLine: {'line': b'gmake[2]: *** [CMakeFiles/publisher.dir/build.make:90: CMakeFiles/publisher.dir/src/decklink_camera_driver.cpp.o] Error 1\n'}
[5.145573] (hi_decklink_ros2) StderrLine: {'line': b'gmake[1]: *** [CMakeFiles/Makefile2:168: CMakeFiles/publisher.dir/all] Error 2\n'}
[5.145878] (hi_decklink_ros2) StderrLine: {'line': b'gmake: *** [Makefile:146: all] Error 2\n'}
[5.148148] (hi_decklink_ros2) CommandEnded: {'returncode': 2}
[5.157940] (hi_decklink_ros2) JobEnded: {'identifier': 'hi_decklink_ros2', 'rc': 2}
[5.174855] (-) EventReactorShutdown: {}
